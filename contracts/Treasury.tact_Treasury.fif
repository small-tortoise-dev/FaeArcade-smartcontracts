// automatically generated from `@stdlib/std/stdlib.fc` `E:/Ton/FaeArcade/FaeArcade-SmartContracts/contracts/Treasury.tact_Treasury.fc` 
PROGRAM{
  DECLPROC __tact_not_null
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC __tact_dict_get_int_int
  DECLPROC __tact_dict_set_int_int
  DECLPROC __tact_dict_get_int_cell
  DECLPROC __tact_dict_set_int_cell
  DECLPROC $DeployOk$_store
  DECLPROC $DeployOk$_store_cell
  DECLPROC $RoomData$_store
  DECLPROC $RoomData$_store_cell
  DECLPROC $RoomData$_load
  DECLPROC $RoomData$_as_optional
  DECLPROC $RoomData$_load_opt
  DECLPROC $Treasury$_store
  DECLPROC $Treasury$_load
  DECLPROC $Context$_get_value
  DECLPROC $RoomData$_not_null
  DECLPROC $Treasury$init$_load
  DECLPROC $Treasury$_contract_init
  DECLPROC $Treasury$_contract_load
  DECLPROC $Treasury$_contract_store
  DECLPROC $Treasury$_fun_getCompositeKey
  DECLPROC $MessageParameters$_constructor_bounce_to_value_mode_body
  DECLPROC $Treasury$_fun_notify
  DECLPROC $DeployOk$_constructor_queryId
  DECLPROC $RoomData$_constructor_entry_fee_winners_count_status_pool_total_entries_paid_hash_created_at_closed_at
  DECLPROC $SendParameters$_constructor_to_value_body_bounce
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_not_null PROCINLINE:<{
    DUP
    ISNULL
    128 THROWIF
  }>
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  __tact_dict_get_int_int PROCINLINE:<{
    s1 s3 s3 XCHG3
    DICTIGET
    NULLSWAPIFNOT
    IF:<{
      SWAP
      LDIX
      DROP
    }>ELSE<{
      2DROP
      PUSHNULL
    }>
  }>
  __tact_dict_set_int_int PROCINLINE:<{
    OVER
    ISNULL
    IF:<{
      2DROP
      -ROT
      DICTIDEL
      DROP
    }>ELSE<{
      NEWC
      SWAP
      STIX
      s1 s3 s3 XCHG3
      DICTISETB
    }>
  }>
  __tact_dict_get_int_cell PROCINLINE:<{
    -ROT
    DICTIGETREF
    NULLSWAPIFNOT
    IF:<{
    }>ELSE<{
      DROP
      PUSHNULL
    }>
  }>
  __tact_dict_set_int_cell PROCINLINE:<{
    DUP
    ISNULL
    IF:<{
      DROP
      -ROT
      DICTIDEL
      DROP
    }>ELSE<{
      s1 s3 s3 XCHG3
      DICTISETREF
    }>
  }>
  $DeployOk$_store PROCINLINE:<{
    2952335191 PUSHINT
    ROT
    32 STU
    64 STU
  }>
  $DeployOk$_store_cell PROCINLINE:<{
    SWAP
    $DeployOk$_store INLINECALLDICT
    ENDC
  }>
  $RoomData$_store PROCINLINE:<{
    s7 s8 XCHG2
    257 PUSHINT
    STIX
    s1 s5 XCHG
    257 PUSHINT
    STIX
    s1 s3 XCHG
    257 PUSHINT
    STIX
    SWAP
    NEWC
    257 PUSHINT
    STIX
    s1 s2 XCHG
    257 PUSHINT
    STIX
    s1 s2 XCHG
    257 PUSHINT
    STIX
    s0 s2 XCHG
    NEWC
    257 PUSHINT
    STIX
    s1 s3 XCHG
    257 PUSHINT
    STIX
    STBREFR
    STBREFR
  }>
  $RoomData$_store_cell PROCINLINE:<{
    8 -ROLL
    $RoomData$_store INLINECALLDICT
    ENDC
  }>
  $RoomData$_load PROCINLINE:<{
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    LDREF
    SWAP
    CTOS
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    LDREF
    DROP
    CTOS
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    DROP
    s5 s8 XCHG
    s5 s7 XCHG
    s5 s6 XCHG
  }>
  $RoomData$_as_optional PROCINLINE:<{
        8 TUPLE
  }>
  $RoomData$_load_opt PROCINLINE:<{
    DUP
    ISNULL
    IF:<{
      DROP
      PUSHNULL
    }>ELSE<{
      CTOS
      $RoomData$_load INLINECALLDICT
      1 8 BLKDROP2
      $RoomData$_as_optional INLINECALLDICT
    }>
  }>
  $Treasury$_store PROCINLINE:<{
    s9 s10 XCHG2
    STSLICE
    s1 s7 XCHG
    STSLICE
    s1 s5 XCHG
    257 PUSHINT
    STIX
    s0 s3 XCHG
    NEWC
    257 PUSHINT
    STIX
    s1 s2 XCHG
    STDICT
    257 PUSHINT
    STIX
    s1 s2 XCHG
    STDICT
    s1 s2 XCHG
    STDICT
    s1 s2 XCHG
    257 PUSHINT
    STIX
    s0 s2 XCHG
    NEWC
    257 PUSHINT
    STIX
    s1 s2 XCHG
    STBREFR
    STBREFR
  }>
  $Treasury$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    257 PUSHINT
    LDIX
    LDREF
    SWAP
    CTOS
    257 PUSHINT
    LDIX
    LDDICT
    257 PUSHINT
    LDIX
    LDDICT
    LDDICT
    257 PUSHINT
    LDIX
    LDREF
    DROP
    CTOS
    257 PUSHINT
    LDIX
    DROP
    s7 s10 XCHG
    s7 s9 XCHG
    s7 s8 XCHG
  }>
  $Context$_get_value PROCINLINE:<{
    s1 s3 XCHG
    3 BLKDROP
  }>
  $RoomData$_not_null PROCINLINE:<{
    DUP
    ISNULL
    128 THROWIF
        8 UNTUPLE
  }>
  $Treasury$init$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    -ROT
  }>
  $Treasury$_contract_init PROCINLINE:<{
    PUSHNULL
    PUSHNULL
    PUSHNULL
    250 PUSHINT
    10000 PUSHINT
    0 PUSHINT
    s5 s5 s5 XCPU2
    s5 s6 s4 XCHG3
    s0 s3 XCHG2
  }>
  $Treasury$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $Treasury$_load INLINECALLDICT
      1 10 BLKDROP2
    }>ELSE<{
      $Treasury$init$_load INLINECALLDICT
      s0 s2 XCHG
      ENDS
      SWAP
      $Treasury$_contract_init INLINECALLDICT
    }>
  }>
  $Treasury$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    10 -ROLL
    $Treasury$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $Treasury$_fun_getCompositeKey PROCREF:<{
    DROP
    12345 PUSHINT
    SWAP
    1000000 PUSHINT
    MUL
    SWAP
    ADD
  }>
  $MessageParameters$_constructor_bounce_to_value_mode_body PROCINLINE:<{
    s3 s3 XCHG2
    s0 s4 XCHG
  }>
  $Treasury$_fun_notify PROCINLINE:<{
    __tact_context_get_sender INLINECALLDICT
    FALSE
    0 PUSHINT
    s0 s3 XCHG2
    66 PUSHINT
    SWAP
    $MessageParameters$_constructor_bounce_to_value_mode_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
        STZEROES
        // â†’ Stack state
        // s0: Builder
        // s1: `body`
        // s2: `mode`
        STDICT
        ENDC
        SWAP
        SENDRAWMSG
  }>
  $DeployOk$_constructor_queryId PROCINLINE:<{
  }>
  $RoomData$_constructor_entry_fee_winners_count_status_pool_total_entries_paid_hash_created_at_closed_at PROCINLINE:<{
  }>
  $SendParameters$_constructor_to_value_body_bounce PROCINLINE:<{
    0 PUSHINT
    s0 s4 XCHG
    PUSHNULL
    s0 s3 XCHG
    s0 s4 XCHG
    PUSHNULL
    s2 s3 XCHG2
  }>
  recv_internal PROC:<{
    c2 SAVE
    SAMEALTSAVE
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $Treasury$_contract_load INLINECALLDICT
    s0 s11 XCHG
    IFJMP:<{
      11 BLKDROP
    }>
    s9 PUSH
    SBITS
    31 GTINT
    IF:<{
      s0 s9 XCHG
      32 LDU
      SWAP
      2490013878 PUSHINT
      EQUAL
      IFJMP:<{
        64 LDU
        DROP
        $DeployOk$_constructor_queryId INLINECALLDICT
        NEWC
        $DeployOk$_store_cell INLINECALLDICT
        s8 s10 XCHG
        s7 s9 XCHG
        s6 s8 XCHG
        s5 s7 XCHG
        s4 s6 XCHG
        s3 s5 XCHG
        s4 s3 s0 XCHG3
        s1 s2 XCHG
        $Treasury$_fun_notify INLINECALLDICT
        $Treasury$_contract_store INLINECALLDICT
        RETALT
      }>
      s0 s9 XCHG
    }>
    s0 s9 XCHG
    HASHSU
    DUP
    65339108170947719366692940865188853848563609028251501148827695358024788922791 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      s2 POP
      12345 PUSHINT
      1000000000 PUSHINT
      100 PUSHINT
      s5 PUSH
      257 PUSHINT
      s4 PUSH
      __tact_dict_get_int_cell INLINECALLDICT
      $RoomData$_load_opt INLINECALLDICT
      27407 PUSHINT
      SWAP
      ISNULL
      THROWANYIFNOT
      1 PUSHINT
      0 PUSHINT
      s0 s0 PUSH2
          NOW
      OVER
      $RoomData$_constructor_entry_fee_winners_count_status_pool_total_entries_paid_hash_created_at_closed_at INLINECALLDICT
      s0 s7 XCHG
      s0 s6 XCHG
      s0 s5 XCHG
      s0 s4 XCHG
      s3 s1 s3 XCHG3
      257 PUSHINT
      s2 s8 XCHG2
      NEWC
      $RoomData$_store_cell INLINECALLDICT
      s2 PUSH
      s3 s6 XCHG
      SWAP
      __tact_dict_set_int_cell INLINECALLDICT
      s7 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG2
      s1 s4 XCHG
      $Treasury$_contract_store INLINECALLDICT
    }>
    DUP
    11486432764598937623712776083356782539686719346690947096398028292056259328638 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      12345 PUSHINT
      s4 PUSH
      257 PUSHINT
      s2 PUSH
      __tact_dict_get_int_cell INLINECALLDICT
      $RoomData$_load_opt INLINECALLDICT
      DUP
      ISNULL
      IF:<{
        DROP
        1000000000 PUSHINT
        100 PUSHINT
        1 PUSHINT
        0 PUSHINT
        s0 s0 PUSH2
            NOW
        OVER
        $RoomData$_constructor_entry_fee_winners_count_status_pool_total_entries_paid_hash_created_at_closed_at INLINECALLDICT
        257 PUSHINT
        s8 s7 s6 PUSH3
        s8 s7 s6 PUSH3
        s8 s7 PUSH2
        NEWC
        $RoomData$_store_cell INLINECALLDICT
        s10 PUSH
        s3 s15 XCHG
        SWAP
        __tact_dict_set_int_cell INLINECALLDICT
        s0 s12 XCHG
        $RoomData$_as_optional INLINECALLDICT
      }>
      $RoomData$_not_null INLINECALLDICT
      5883 PUSHINT
      s6 PUSH
      1 EQINT
      THROWANYIFNOT
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      s8 s8 PUSH2
      100000000 PUSHINT
      ADD
      s2 PUSH
      20096 PUSHINT
      s0 s3 XCHG
      GEQ
      s1 s2 XCHG
      THROWANYIFNOT
      OVER
      63002 PUSHINT
      s0 s2 XCHG
      LEQ
      THROWANYIFNOT
      s8 PUSH
      19 s() PUSH
      MUL
      20 s() PUSH
      DIV
      DUP
      0 GTINT
      IF:<{
            B{b5ee9c7241010101000f00001a00000000486f7573652046656509a96100} B>boc PUSHREF
        FALSE
        20 s() PUSH
        s3 s2 s(-1) PUXC2
        $SendParameters$_constructor_to_value_body_bounce INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // â†’ Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            AND
            // â†’ Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // â†’ Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // â†’ Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      }>
      s9 s(-1) PUXC
      SUB
      s1 s6 XCHG
      ADD
      s0 s4 XCHG
      INC
      257 PUSHINT
      s9 PUSH
      s0 s7 XCHG
      s6 s9 XCHG
      s5 s8 XCHG
      s4 s9 XCHG
      s3 s1 s8 XCHG3
      s9 s2 XCHG2
      NEWC
      $RoomData$_store_cell INLINECALLDICT
      s3 s8 XCHG
      s1 s4 XCHG
      __tact_dict_set_int_cell INLINECALLDICT
      s0 s5 XCHG
      SUB
      DUP
      0 GTINT
      IF:<{
        __tact_context_get_sender INLINECALLDICT
            B{b5ee9c724101010100130000220000000045786365737320726566756e64bdb5887c} B>boc PUSHREF
        s1 s2 XCHG
        FALSE
        $SendParameters$_constructor_to_value_body_bounce INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // â†’ Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            AND
            // â†’ Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // â†’ Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // â†’ Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      }>ELSE<{
        DROP
      }>
      s7 s9 XCHG
      2 7 BLKSWAP
      $Treasury$_contract_store INLINECALLDICT
    }>
    DUP
    98647795627702613506010514871469563766882645966695773169018498551962864737173 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      12345 PUSHINT
      s4 PUSH
      257 PUSHINT
      s2 PUSH
      __tact_dict_get_int_cell INLINECALLDICT
      $RoomData$_load_opt INLINECALLDICT
      14103 PUSHINT
      OVER
      ISNULL
      NOT
      THROWANYIFNOT
      $RoomData$_not_null INLINECALLDICT
      DROP
      5883 PUSHINT
      s0 s5 XCHG
      1 EQINT
      s1 s5 XCHG
      THROWANYIFNOT
      0 PUSHINT
          NOW
      s6 s7 XCHG
      s5 s7 XCHG
      s1 s4 XCHG
      s3 s3 s0 XCHG3
      257 PUSHINT
      s8 s8 XCHG2
      NEWC
      $RoomData$_store_cell INLINECALLDICT
      s3 s6 XCHG
      s1 s2 XCHG
      __tact_dict_set_int_cell INLINECALLDICT
      s7 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s4 s3 s5 XCHG3
      s1 s2 XCHG
      $Treasury$_contract_store INLINECALLDICT
    }>
    DUP
    113145924803915737201817294414281543959707744674846723769969799601617242813327 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      12345 PUSHINT
      100 PUSHINT
      s5 PUSH
      257 PUSHINT
      s3 PUSH
      __tact_dict_get_int_cell INLINECALLDICT
      $RoomData$_load_opt INLINECALLDICT
      14103 PUSHINT
      OVER
      ISNULL
      NOT
      THROWANYIFNOT
      $RoomData$_not_null INLINECALLDICT
      50845 PUSHINT
      s0 s6 XCHG
      0 EQINT
      s1 s6 XCHG
      THROWANYIFNOT
      16751 PUSHINT
      s0 s2 XCHG
      0 EQINT
      s1 s2 XCHG
      THROWANYIFNOT
      62631 PUSHINT
      s5 PUSH
      100 EQINT
      THROWANYIFNOT
      5050 PUSHINT
      s3 PUSH
      0 PUSHINT
      WHILE:<{
        DUP
        100 LESSINT
      }>DO<{
        s9 s0 PUSH2
        SUB
        s2 s(-1) PUXC
        MUL
        s3 PUSH
        DIV
        12345000000 PUSHINT
        s2 PUSH
        ADD
        257 PUSHINT
        DUP
        s4 16 s() XCHG
        s1 s3 XCHG
        __tact_dict_set_int_int INLINECALLDICT
        s0 s12 XCHG
        INC
      }>
      3 BLKDROP
      s6 POP
      2 PUSHINT
          NOW
      s0 s4 XCHG2
      257 PUSHINT
      s8 s8 XCHG2
      NEWC
      $RoomData$_store_cell INLINECALLDICT
      s3 s6 XCHG
      s1 s2 XCHG
      __tact_dict_set_int_cell INLINECALLDICT
      s7 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s4 s3 s5 XCHG3
      s1 s2 XCHG
      $Treasury$_contract_store INLINECALLDICT
    }>
    DUP
    71053314020396653474735867382186105413043476147417316094843433511474427113400 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      12345 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s5 PUSH
      257 PUSHINT
      s3 PUSH
      __tact_dict_get_int_cell INLINECALLDICT
      $RoomData$_load_opt INLINECALLDICT
      14103 PUSHINT
      OVER
      ISNULL
      NOT
      THROWANYIFNOT
      $RoomData$_not_null INLINECALLDICT
      s5 s6 XCHG
      6 BLKDROP
      10215 PUSHINT
      s2 POP
      2 EQINT
      THROWANYIFNOT
      s9 s10 XCHG
      s8 s9 XCHG
      s7 s8 XCHG
      s6 s7 XCHG
      s5 s6 XCHG
      s4 s5 XCHG
      s3 s4 XCHG
      s3 s11 s11 XCHG3
      s11 PUSH
      $Treasury$_fun_getCompositeKey INLINECALLDICT
      257 PUSHINT
      s5 s(-1) s(-1) PUXCPU
      s3 s(-1) PUXC
      __tact_dict_get_int_int INLINECALLDICT
      6225 PUSHINT
      OVER
      ISNULL
      NOT
      THROWANYIFNOT
      0 PUSHINT
      257 PUSHINT
      s6 s(-1) s(-1) PUXCPU
      s5 s(-1) PUXC
      __tact_dict_get_int_int INLINECALLDICT
      DUP
      ISNULL
      NOT
      IF:<{
        NIP
        __tact_not_null INLINECALLDICT
      }>ELSE<{
        DROP
      }>
      SWAP
      __tact_not_null INLINECALLDICT
      OVER
      SUB
      43137 PUSHINT
      OVER
      0 GTINT
      THROWANYIFNOT
          B{b5ee9c724101010100120000200000000052657761726420436c61696d46f5a0f8} B>boc PUSHREF
      s14 s14 s(-1) XCPUXC
      FALSE
      $SendParameters$_constructor_to_value_body_bounce INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // â†’ Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // â†’ Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // â†’ Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // â†’ Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      257 PUSHINT
      s0 s13 XCHG
      ADD
      s12 PUSH
      s4 s5 XCHG
      s3 s13 XCHG
      __tact_dict_set_int_int INLINECALLDICT
      s8 s9 XCHG
      s7 s8 XCHG
      s6 s7 XCHG
      s5 s6 XCHG
      s4 s5 XCHG
      s3 s4 XCHG
      s0 s1 s3 XCHG3
      $Treasury$_contract_store INLINECALLDICT
    }>
    DUP
    78757795652542414393474882215661487212723556572562023039495818662823781219511 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      s1 s6 XCHG
      ADD
      s7 s9 XCHG
      s6 s8 XCHG
      s0 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      s1 s2 XCHG
      $Treasury$_contract_store INLINECALLDICT
    }>
    DUP
    57264055919619110494171454587088091180320136340382694066611435050529519806613 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      10 PUSHINT
      49080 PUSHINT
      s7 PUSH
      0 GTINT
      THROWANYIFNOT
      s0 s5 XCHG
      INC
      s0 s6 XCHG
      1 RSHIFT#
      s0 s5 PUXC
      DIV
      s5 POP
      s4 PUSH
      0 GTINT
      IF:<{
        __tact_context_get_sender INLINECALLDICT
            B{b5ee9c7241010101001800002c00000000546f702053636f7265722041697264726f706da78ddf} B>boc PUSHREF
        s1 s6 s0 XCHG3
        FALSE
        $SendParameters$_constructor_to_value_body_bounce INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // â†’ Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            AND
            // â†’ Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // â†’ Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // â†’ Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      }>ELSE<{
        s4 POP
      }>
      s6 s8 XCHG
      s5 s7 XCHG
      0 PUSHINT
      s0 s7 XCHG
      s5 s6 XCHG
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      $Treasury$_contract_store INLINECALLDICT
    }>
    55268131157929827267953626403212622860892069218340151648131480144009249996920 PUSHINT
    EQUAL
    IFJMP:<{
      26825 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s9 PUSH
      SDEQ
      THROWANYIFNOT
      1000000000 PUSHINT
          BALANCE FIRST
      OVER
      55591 PUSHINT
      s0 s2 XCHG
      LEQ
      THROWANYIFNOT
          B{b5ee9c72410101010016000028000000004f776e6572205769746864726177616cb3c1be94} B>boc PUSHREF
      s9 PUSH
      -ROT
      FALSE
      $SendParameters$_constructor_to_value_body_bounce INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // â†’ Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // â†’ Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // â†’ Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // â†’ Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      s7 s9 XCHG
      2 7 BLKSWAP
      $Treasury$_contract_store INLINECALLDICT
    }>
    10 BLKDROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                    swap
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop
                    }
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll
                    {
                        // If the dict is empty, throw 11
                        11 THROWARG
                    }
                    {
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX
                    } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
