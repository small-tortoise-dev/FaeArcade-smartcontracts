// automatically generated from `@stdlib/std/stdlib.fc` `E:/Ton/FaeArcade_old/contracts/Treasury.tact_Treasury.fc` 
PROGRAM{
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC $DeployOk$_store
  DECLPROC $DeployOk$_store_cell
  DECLPROC $Treasury$_store
  DECLPROC $Treasury$_load
  DECLPROC $Context$_get_value
  DECLPROC $Treasury$init$_load
  DECLPROC $Treasury$_contract_init
  DECLPROC $Treasury$_contract_load
  DECLPROC $Treasury$_contract_store
  DECLPROC $Treasury$_fun_getOwner
  DECLPROC $Treasury$_fun_getUpgradeAuthority
  DECLPROC $Treasury$_fun_getAirdropPool
  DECLPROC $Treasury$_fun_getCurrentRoomEntryFee
  DECLPROC $Treasury$_fun_getCurrentRoomWinnersCount
  DECLPROC $Treasury$_fun_getCurrentRoomStatus
  DECLPROC $Treasury$_fun_getCurrentRoomPool
  DECLPROC $Treasury$_fun_getCurrentRoomTotalEntries
  DECLPROC $Treasury$_fun_getHouseFeeBps
  DECLPROC $MessageParameters$_constructor_bounce_to_value_mode_body
  DECLPROC $Treasury$_fun_notify
  DECLPROC $DeployOk$_constructor_queryId
  DECLPROC $SendParameters$_constructor_to_value_body
  102025 DECLMETHOD %getOwner
  130873 DECLMETHOD %getUpgradeAuthority
  94920 DECLMETHOD %getAirdropPool
  77956 DECLMETHOD %getCurrentRoomEntryFee
  97059 DECLMETHOD %getCurrentRoomWinnersCount
  127271 DECLMETHOD %getCurrentRoomStatus
  89927 DECLMETHOD %getCurrentRoomPool
  100680 DECLMETHOD %getCurrentRoomTotalEntries
  123079 DECLMETHOD %getHouseFeeBps
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  $DeployOk$_store PROCINLINE:<{
    2952335191 PUSHINT
    ROT
    32 STU
    64 STU
  }>
  $DeployOk$_store_cell PROCINLINE:<{
    SWAP
    $DeployOk$_store INLINECALLDICT
    ENDC
  }>
  $Treasury$_store PROCINLINE:<{
    s11 s12 XCHG2
    STSLICE
    s1 s9 XCHG
    STSLICE
    s1 s7 XCHG
    257 PUSHINT
    STIX
    s0 s5 XCHG
    NEWC
    257 PUSHINT
    STIX
    s1 s4 XCHG
    257 PUSHINT
    STIX
    s1 s2 XCHG
    257 PUSHINT
    STIX
    SWAP
    NEWC
    257 PUSHINT
    STIX
    s1 s2 XCHG
    257 PUSHINT
    STIX
    s1 s3 XCHG
    257 PUSHINT
    STIX
    s0 s3 XCHG
    NEWC
    257 PUSHINT
    STIX
    s1 s4 XCHG
    257 PUSHINT
    STIX
    s1 s4 XCHG
    257 PUSHINT
    STIX
    STBREFR
    s1 s2 XCHG
    STBREFR
    STBREFR
  }>
  $Treasury$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    257 PUSHINT
    LDIX
    LDREF
    SWAP
    CTOS
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    LDREF
    DROP
    CTOS
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    LDREF
    DROP
    CTOS
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    DROP
    s9 s12 XCHG
    s9 s11 XCHG
    s9 s10 XCHG
  }>
  $Context$_get_value PROCINLINE:<{
    s1 s3 XCHG
    3 BLKDROP
  }>
  $Treasury$init$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    -ROT
  }>
  $Treasury$_contract_init PROCINLINE:<{
    250 PUSHINT
    10000 PUSHINT
    0 PUSHINT
    s0 s0 s0 PUSH3
    s0 s0 s0 PUSH3
    DUP
    2 8 BLKSWAP
  }>
  $Treasury$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $Treasury$_load INLINECALLDICT
      1 12 BLKDROP2
    }>ELSE<{
      $Treasury$init$_load INLINECALLDICT
      s0 s2 XCHG
      ENDS
      SWAP
      $Treasury$_contract_init INLINECALLDICT
    }>
  }>
  $Treasury$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    12 -ROLL
    $Treasury$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $Treasury$_fun_getOwner PROCREF:<{
    s11 PUSH
  }>
  $Treasury$_fun_getUpgradeAuthority PROCREF:<{
    s10 PUSH
  }>
  $Treasury$_fun_getAirdropPool PROCREF:<{
    s9 PUSH
  }>
  $Treasury$_fun_getCurrentRoomEntryFee PROCREF:<{
    s7 PUSH
  }>
  $Treasury$_fun_getCurrentRoomWinnersCount PROCREF:<{
    s6 PUSH
  }>
  $Treasury$_fun_getCurrentRoomStatus PROCREF:<{
    s5 PUSH
  }>
  $Treasury$_fun_getCurrentRoomPool PROCREF:<{
    s4 PUSH
  }>
  $Treasury$_fun_getCurrentRoomTotalEntries PROCREF:<{
    s3 PUSH
  }>
  $Treasury$_fun_getHouseFeeBps PROCREF:<{
    OVER
  }>
  $MessageParameters$_constructor_bounce_to_value_mode_body PROCINLINE:<{
    s3 s3 XCHG2
    s0 s4 XCHG
  }>
  $Treasury$_fun_notify PROCINLINE:<{
    __tact_context_get_sender INLINECALLDICT
    FALSE
    0 PUSHINT
    s0 s3 XCHG2
    66 PUSHINT
    SWAP
    $MessageParameters$_constructor_bounce_to_value_mode_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
        STZEROES
        // â†’ Stack state
        // s0: Builder
        // s1: `body`
        // s2: `mode`
        STDICT
        ENDC
        SWAP
        SENDRAWMSG
  }>
  $DeployOk$_constructor_queryId PROCINLINE:<{
  }>
  $SendParameters$_constructor_to_value_body PROCINLINE:<{
    0 PUSHINT
    PUSHNULL
    s4 s2 XCHG2
    PUSHNULL
    s4 s2 XCHG2
    TRUE
  }>
  %getOwner PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    $Treasury$_fun_getOwner INLINECALLDICT
    12 1 BLKDROP2
  }>
  %getUpgradeAuthority PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    $Treasury$_fun_getUpgradeAuthority INLINECALLDICT
    12 1 BLKDROP2
  }>
  %getAirdropPool PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    $Treasury$_fun_getAirdropPool INLINECALLDICT
    12 1 BLKDROP2
  }>
  %getCurrentRoomEntryFee PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    $Treasury$_fun_getCurrentRoomEntryFee INLINECALLDICT
    12 1 BLKDROP2
  }>
  %getCurrentRoomWinnersCount PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    $Treasury$_fun_getCurrentRoomWinnersCount INLINECALLDICT
    12 1 BLKDROP2
  }>
  %getCurrentRoomStatus PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    $Treasury$_fun_getCurrentRoomStatus INLINECALLDICT
    12 1 BLKDROP2
  }>
  %getCurrentRoomPool PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    $Treasury$_fun_getCurrentRoomPool INLINECALLDICT
    12 1 BLKDROP2
  }>
  %getCurrentRoomTotalEntries PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    $Treasury$_fun_getCurrentRoomTotalEntries INLINECALLDICT
    12 1 BLKDROP2
  }>
  %getHouseFeeBps PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    $Treasury$_fun_getHouseFeeBps INLINECALLDICT
    12 1 BLKDROP2
  }>
  recv_internal PROC:<{
    c2 SAVE
    SAMEALTSAVE
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $Treasury$_contract_load INLINECALLDICT
    s0 s13 XCHG
    IFJMP:<{
      13 BLKDROP
    }>
    s11 PUSH
    SBITS
    31 GTINT
    IF:<{
      s0 s11 XCHG
      32 LDU
      SWAP
      2490013878 PUSHINT
      EQUAL
      IFJMP:<{
        64 LDU
        DROP
        $DeployOk$_constructor_queryId INLINECALLDICT
        NEWC
        $DeployOk$_store_cell INLINECALLDICT
        s10 s12 XCHG
        s9 s11 XCHG
        s8 s10 XCHG
        s7 s9 XCHG
        s6 s8 XCHG
        s5 s7 XCHG
        s4 s6 XCHG
        s3 s5 XCHG
        s4 s3 s0 XCHG3
        s1 s2 XCHG
        $Treasury$_fun_notify INLINECALLDICT
        $Treasury$_contract_store INLINECALLDICT
        RETALT
      }>
      s0 s11 XCHG
    }>
    s0 s11 XCHG
    HASHSU
    DUP
    65339108170947719366692940865188853848563609028251501148827695358024788922791 PUSHINT
    EQUAL
    IFJMP:<{
      s4 s7 XCHG
      7 BLKDROP
      12345 PUSHINT
      1000000000 PUSHINT
      100 PUSHINT
      27407 PUSHINT
      s0 s4 XCHG
      0 EQINT
      s1 s4 XCHG
      THROWANYIFNOT
      1 PUSHINT
      0 PUSHINT
      s0 s0 PUSH2
      s9 s11 XCHG
      s8 s10 XCHG
      s7 s9 XCHG
      s5 s8 XCHG
      s4 s7 XCHG
      2 4 BLKSWAP
      $Treasury$_contract_store INLINECALLDICT
    }>
    DUP
    11486432764598937623712776083356782539686719346690947096398028292056259328638 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      5883 PUSHINT
      s4 PUSH
      1 EQINT
      THROWANYIFNOT
      s5 PUSH
      60262 PUSHINT
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      ROT
      EQUAL
      THROWANYIFNOT
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      s11 PUSH
      MUL
      s12 PUSH
      DIV
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      SWAP
      SUB
      s1 s3 XCHG
      ADD
      SWAP
      INC
      s9 s11 XCHG
      s8 s10 XCHG
      s7 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s0 s3 XCHG
      s4 s5 XCHG2
      $Treasury$_contract_store INLINECALLDICT
    }>
    DUP
    98647795627702613506010514871469563766882645966695773169018498551962864737173 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      5883 PUSHINT
      s0 s4 XCHG
      1 EQINT
      s1 s4 XCHG
      THROWANYIFNOT
      s8 s10 XCHG
      s7 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      0 PUSHINT
      s4 s3 s5 XCHG3
      s1 s2 XCHG
      $Treasury$_contract_store INLINECALLDICT
    }>
    DUP
    109566106442582322567942532497794433116285371378981746054569699909280597526641 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      50845 PUSHINT
      s0 s4 XCHG
      0 EQINT
      s1 s4 XCHG
      THROWANYIFNOT
      16751 PUSHINT
      s0 s3 XCHG
      0 EQINT
      s1 s3 XCHG
      THROWANYIFNOT
      3 PUSHINT
      s3 PUSH
      62631 PUSHINT
      SWAP
      3 EQINT
      THROWANYIFNOT
      s1 s(-1) PUXC
      DIV
          B{b5ee9c72410101010024000043801f029f57c7a21c4f6481524598a9a36a41e5738a115571e97ff9ae4cd5341d3d70ea7536c0} B>boc <s PUSHSLICE
          B{b5ee9c72410101010024000043800deb78cf30dc0c8612c3b3be0086724d499b25cb2fbbb154c086c8b58417a2f050104c69cb} B>boc <s PUSHSLICE
          B{b5ee9c7241010101002400004380107bfaaa5cc6e5368e5f9799188bd798cd22e04ab16d1d8ea4fc37480741e6351064a3e1a6} B>boc <s PUSHSLICE
          B{b5ee9c7241010101000c000014000000005061796f75741931a62c} B>boc PUSHREF
      s3 s4 s(-1) XCPUXC
      $SendParameters$_constructor_to_value_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // â†’ Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // â†’ Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // â†’ Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // â†’ Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
          B{b5ee9c7241010101000c000014000000005061796f75741931a62c} B>boc PUSHREF
      s3 s(-1) PUXC
      $SendParameters$_constructor_to_value_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // â†’ Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // â†’ Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // â†’ Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // â†’ Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
          B{b5ee9c7241010101000c000014000000005061796f75741931a62c} B>boc PUSHREF
      s1 s2 XCHG
      $SendParameters$_constructor_to_value_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // â†’ Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // â†’ Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // â†’ Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // â†’ Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      s7 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      s2 s4 XCHG
      2 PUSHINT
      s3 s4 XCHG2
      12345 PUSHINT
      -ROT
      $Treasury$_contract_store INLINECALLDICT
    }>
    DUP
    78757795652542414393474882215661487212723556572562023039495818662823781219511 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      s1 s8 XCHG
      ADD
      s9 s11 XCHG
      s8 s10 XCHG
      s0 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      s1 s2 XCHG
      $Treasury$_contract_store INLINECALLDICT
    }>
    DUP
    5168333652664344554012790791614642036435164078341143867184443838454548081932 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      s0 s7 XCHG
      1 RSHIFT#
      DUP
      1 RSHIFT#
          B{b5ee9c72410101010024000043801f029f57c7a21c4f6481524598a9a36a41e5738a115571e97ff9ae4cd5341d3d70ea7536c0} B>boc <s PUSHSLICE
          B{b5ee9c72410101010024000043800deb78cf30dc0c8612c3b3be0086724d499b25cb2fbbb154c086c8b58417a2f050104c69cb} B>boc <s PUSHSLICE
          B{b5ee9c7241010101001700002a00000000546f702057696e6e6572205061796f7574333a3f4c} B>boc PUSHREF
      s2 s3 s(-1) XCPUXC
      $SendParameters$_constructor_to_value_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // â†’ Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // â†’ Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // â†’ Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // â†’ Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
          B{b5ee9c7241010101001700002a00000000546f702057696e6e6572205061796f7574333a3f4c} B>boc PUSHREF
      s1 s2 XCHG
      $SendParameters$_constructor_to_value_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // â†’ Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // â†’ Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // â†’ Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // â†’ Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
          B{b5ee9c7241010101002400004380107bfaaa5cc6e5368e5f9799188bd798cd22e04ab16d1d8ea4fc37480741e6351064a3e1a6} B>boc <s PUSHSLICE
          B{b5ee9c7241010101001a0000300000000053747265616b2057696e6e6572205061796f75749bd61e1a} B>boc PUSHREF
      s1 s2 XCHG
      $SendParameters$_constructor_to_value_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // â†’ Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // â†’ Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // â†’ Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // â†’ Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      s8 s10 XCHG
      s7 s9 XCHG
      0 PUSHINT
      s0 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      s1 s2 XCHG
      $Treasury$_contract_store INLINECALLDICT
    }>
    89995767705625181278073524248112866241346435207594766842139556122302068663934 PUSHINT
    EQUAL
    IFJMP:<{
      s9 s11 XCHG
      2 9 BLKSWAP
      $Treasury$_contract_store INLINECALLDICT
    }>
    12 BLKDROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                    swap
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop
                    }
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll
                    {
                        // If the dict is empty, throw 11
                        11 THROWARG
                    }
                    {
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX
                    } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
