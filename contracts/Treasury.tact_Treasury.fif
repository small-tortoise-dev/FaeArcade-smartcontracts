// automatically generated from `@stdlib/std/stdlib.fc` `E:/Ton/FaeArcade/FaeArcade-SmartContracts/contracts/Treasury.tact_Treasury.fc` 
PROGRAM{
  DECLPROC __tact_not_null
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC __tact_dict_get_slice_int
  DECLPROC __tact_dict_set_slice_int
  DECLPROC __tact_dict_get_int_slice
  DECLPROC __tact_dict_get_int_int
  DECLPROC __tact_dict_set_int_int
  DECLPROC __tact_dict_get_int_cell
  DECLPROC __tact_dict_set_int_cell
  DECLPROC $RoomData$_store
  DECLPROC $RoomData$_store_cell
  DECLPROC $RoomData$_load
  DECLPROC $RoomData$_as_optional
  DECLPROC $RoomData$_load_opt
  DECLPROC $Treasury$_store
  DECLPROC $Treasury$_load
  DECLPROC $Context$_get_value
  DECLPROC $RoomData$_not_null
  DECLPROC $RoomData$_to_tuple
  DECLPROC $RoomData$_to_opt_tuple
  DECLPROC $RoomData$_to_opt_external
  DECLPROC $Treasury$init$_load
  DECLPROC $Treasury$_contract_init
  DECLPROC $Treasury$_contract_load
  DECLPROC $Treasury$_contract_store
  DECLPROC $Treasury$_fun_getOwner
  DECLPROC $Treasury$_fun_getUpgradeAuthority
  DECLPROC $Treasury$_fun_getAirdropPool
  DECLPROC $Treasury$_fun_getAirdropId
  DECLPROC $Treasury$_fun_getCurrentRoomId
  DECLPROC $Treasury$_fun_getHouseFeeBps
  DECLPROC $Treasury$_fun_getHouseFeeDenominator
  DECLPROC $Treasury$_fun_getRoomData
  DECLPROC $Treasury$_fun_getWinnerReward
  DECLPROC $Treasury$_fun_getClaimedReward
  DECLPROC $Treasury$_fun_computeEntryKey
  DECLPROC $Treasury$_fun_hasUserEntered
  DECLPROC $Treasury$_fun_getMinEntryFee
  DECLPROC $Treasury$_fun_getMaxEntriesPerRoom
  DECLPROC $RoomData$_constructor_entry_fee_winners_count_status_pool_total_entries_paid_hash_created_at_closed_at
  DECLPROC $SendParameters$_constructor_to_value_body_bounce
  102025 DECLMETHOD %getOwner
  130873 DECLMETHOD %getUpgradeAuthority
  94920 DECLMETHOD %getAirdropPool
  124041 DECLMETHOD %getAirdropId
  80378 DECLMETHOD %getCurrentRoomId
  123079 DECLMETHOD %getHouseFeeBps
  71484 DECLMETHOD %getHouseFeeDenominator
  71393 DECLMETHOD %getRoomData
  68060 DECLMETHOD %getWinnerReward
  125005 DECLMETHOD %getClaimedReward
  117878 DECLMETHOD %hasUserEntered
  93315 DECLMETHOD %computeEntryKey
  65901 DECLMETHOD %getMinEntryFee
  113427 DECLMETHOD %getMaxEntriesPerRoom
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_not_null PROCINLINE:<{
    DUP
    ISNULL
    128 THROWIF
  }>
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  __tact_dict_get_slice_int PROCINLINE:<{
    s1 s3 s3 XCHG3
        DICTGET NULLSWAPIFNOT
    IF:<{
      SWAP
      LDIX
      DROP
    }>ELSE<{
      2DROP
      PUSHNULL
    }>
  }>
  __tact_dict_set_slice_int PROCINLINE:<{
    OVER
    ISNULL
    IF:<{
      2DROP
      -ROT
          DICTDEL
      DROP
    }>ELSE<{
      NEWC
      SWAP
      STIX
      s1 s3 s3 XCHG3
      DICTSETB
    }>
  }>
  __tact_dict_get_int_slice PROCINLINE:<{
    -ROT
    DICTIGET
    NULLSWAPIFNOT
    IF:<{
    }>ELSE<{
      DROP
      PUSHNULL
    }>
  }>
  __tact_dict_get_int_int PROCINLINE:<{
    s1 s3 s3 XCHG3
    DICTIGET
    NULLSWAPIFNOT
    IF:<{
      SWAP
      LDIX
      DROP
    }>ELSE<{
      2DROP
      PUSHNULL
    }>
  }>
  __tact_dict_set_int_int PROCINLINE:<{
    OVER
    ISNULL
    IF:<{
      2DROP
      -ROT
      DICTIDEL
      DROP
    }>ELSE<{
      NEWC
      SWAP
      STIX
      s1 s3 s3 XCHG3
      DICTISETB
    }>
  }>
  __tact_dict_get_int_cell PROCINLINE:<{
    -ROT
    DICTIGETREF
    NULLSWAPIFNOT
    IF:<{
    }>ELSE<{
      DROP
      PUSHNULL
    }>
  }>
  __tact_dict_set_int_cell PROCINLINE:<{
    DUP
    ISNULL
    IF:<{
      DROP
      -ROT
      DICTIDEL
      DROP
    }>ELSE<{
      s1 s3 s3 XCHG3
      DICTISETREF
    }>
  }>
  $RoomData$_store PROCINLINE:<{
    s7 s8 XCHG2
    257 PUSHINT
    STIX
    s1 s5 XCHG
    257 PUSHINT
    STIX
    s1 s3 XCHG
    257 PUSHINT
    STIX
    SWAP
    NEWC
    257 PUSHINT
    STIX
    s1 s2 XCHG
    257 PUSHINT
    STIX
    s1 s2 XCHG
    257 PUSHINT
    STIX
    s0 s2 XCHG
    NEWC
    257 PUSHINT
    STIX
    s1 s3 XCHG
    257 PUSHINT
    STIX
    STBREFR
    STBREFR
  }>
  $RoomData$_store_cell PROCINLINE:<{
    8 -ROLL
    $RoomData$_store INLINECALLDICT
    ENDC
  }>
  $RoomData$_load PROCINLINE:<{
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    LDREF
    SWAP
    CTOS
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    LDREF
    DROP
    CTOS
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    DROP
    s5 s8 XCHG
    s5 s7 XCHG
    s5 s6 XCHG
  }>
  $RoomData$_as_optional PROCINLINE:<{
        8 TUPLE
  }>
  $RoomData$_load_opt PROCINLINE:<{
    DUP
    ISNULL
    IF:<{
      DROP
      PUSHNULL
    }>ELSE<{
      CTOS
      $RoomData$_load INLINECALLDICT
      1 8 BLKDROP2
      $RoomData$_as_optional INLINECALLDICT
    }>
  }>
  $Treasury$_store PROCINLINE:<{
    s12 s13 XCHG2
    STSLICE
    s1 s10 XCHG
    STSLICE
    s1 s8 XCHG
    257 PUSHINT
    STIX
    s0 s6 XCHG
    NEWC
    257 PUSHINT
    STIX
    s1 s5 XCHG
    STDICT
    s1 s3 XCHG
    257 PUSHINT
    STIX
    STDICT
    STDICT
    SWAP
    NEWC
    STDICT
    s1 s3 XCHG
    257 PUSHINT
    STIX
    s1 s3 XCHG
    257 PUSHINT
    STIX
    s1 s3 XCHG
    257 PUSHINT
    STIX
    s0 s3 XCHG
    NEWC
    257 PUSHINT
    STIX
    s1 s3 XCHG
    STBREFR
    STBREFR
    STBREFR
  }>
  $Treasury$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    257 PUSHINT
    LDIX
    LDREF
    SWAP
    CTOS
    257 PUSHINT
    LDIX
    LDDICT
    257 PUSHINT
    LDIX
    LDDICT
    LDDICT
    LDREF
    DROP
    CTOS
    LDDICT
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    LDREF
    DROP
    CTOS
    257 PUSHINT
    LDIX
    DROP
    s10 s13 XCHG
    s10 s12 XCHG
    s10 s11 XCHG
  }>
  $Context$_get_value PROCINLINE:<{
    s1 s3 XCHG
    3 BLKDROP
  }>
  $RoomData$_not_null PROCINLINE:<{
    DUP
    ISNULL
    128 THROWIF
        8 UNTUPLE
  }>
  $RoomData$_to_tuple PROCINLINE:<{
        8 TUPLE
  }>
  $RoomData$_to_opt_tuple PROCINLINE:<{
    DUP
    ISNULL
    IF:<{
      DROP
      PUSHNULL
    }>ELSE<{
      $RoomData$_not_null INLINECALLDICT
      $RoomData$_to_tuple INLINECALLDICT
    }>
  }>
  $RoomData$_to_opt_external PROCINLINE:<{
    $RoomData$_to_opt_tuple INLINECALLDICT
    DUP
    ISNULL
    IF:<{
      DROP
      PUSHNULL
    }>ELSE<{
    }>
  }>
  $Treasury$init$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    -ROT
  }>
  $Treasury$_contract_init PROCINLINE:<{
    PUSHNULL
    PUSHNULL
    PUSHNULL
    PUSHNULL
    250 PUSHINT
    10000 PUSHINT
    100000000 PUSHINT
    1000 PUSHINT
    0 PUSHINT
    s8 s8 s8 XCPU2
    s8 s9 s7 XCHG3
    s5 s6 s4 XCHG3
    s0 s3 XCHG2
  }>
  $Treasury$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $Treasury$_load INLINECALLDICT
      1 13 BLKDROP2
    }>ELSE<{
      $Treasury$init$_load INLINECALLDICT
      s0 s2 XCHG
      ENDS
      SWAP
      $Treasury$_contract_init INLINECALLDICT
    }>
  }>
  $Treasury$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    13 -ROLL
    $Treasury$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $Treasury$_fun_getOwner PROCREF:<{
    s12 PUSH
  }>
  $Treasury$_fun_getUpgradeAuthority PROCREF:<{
    s11 PUSH
  }>
  $Treasury$_fun_getAirdropPool PROCREF:<{
    s10 PUSH
  }>
  $Treasury$_fun_getAirdropId PROCREF:<{
    s9 PUSH
  }>
  $Treasury$_fun_getCurrentRoomId PROCREF:<{
    s7 PUSH
  }>
  $Treasury$_fun_getHouseFeeBps PROCREF:<{
    s3 PUSH
  }>
  $Treasury$_fun_getHouseFeeDenominator PROCREF:<{
    s2 PUSH
  }>
  $Treasury$_fun_getRoomData PROCREF:<{
    257 PUSHINT
    s10 PUSH
    s0 s2 XCHG
    __tact_dict_get_int_cell INLINECALLDICT
    $RoomData$_load_opt INLINECALLDICT
  }>
  $Treasury$_fun_getWinnerReward PROCREF:<{
    NIP
    267 PUSHINT
    s7 PUSH
    s0 s2 XCHG
    257 PUSHINT
    __tact_dict_get_slice_int INLINECALLDICT
  }>
  $Treasury$_fun_getClaimedReward PROCREF:<{
    NIP
    267 PUSHINT
    s6 PUSH
    s0 s2 XCHG
    257 PUSHINT
    __tact_dict_get_slice_int INLINECALLDICT
  }>
  $Treasury$_fun_computeEntryKey PROCREF:<{
        HASHSU
    SWAP
    1000000000000000000000000000000000000000000000000 PUSHINTX
    MUL
    SWAP
    ADD
  }>
  $Treasury$_fun_hasUserEntered PROCREF:<{
    $Treasury$_fun_computeEntryKey INLINECALLDICT
    257 PUSHINT
    s8 PUSH
    s0 s2 XCHG
    1 PUSHINT
    __tact_dict_get_int_int INLINECALLDICT
    ISNULL
    NOT
  }>
  $Treasury$_fun_getMinEntryFee PROCREF:<{
    OVER
  }>
  $Treasury$_fun_getMaxEntriesPerRoom PROCREF:<{
    DUP
  }>
  $RoomData$_constructor_entry_fee_winners_count_status_pool_total_entries_paid_hash_created_at_closed_at PROCINLINE:<{
  }>
  $SendParameters$_constructor_to_value_body_bounce PROCINLINE:<{
    0 PUSHINT
    s0 s4 XCHG
    PUSHNULL
    s0 s3 XCHG
    s0 s4 XCHG
    PUSHNULL
    s2 s3 XCHG2
  }>
  %getOwner PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    $Treasury$_fun_getOwner INLINECALLDICT
    13 1 BLKDROP2
  }>
  %getUpgradeAuthority PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    $Treasury$_fun_getUpgradeAuthority INLINECALLDICT
    13 1 BLKDROP2
  }>
  %getAirdropPool PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    $Treasury$_fun_getAirdropPool INLINECALLDICT
    13 1 BLKDROP2
  }>
  %getAirdropId PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    $Treasury$_fun_getAirdropId INLINECALLDICT
    13 1 BLKDROP2
  }>
  %getCurrentRoomId PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    $Treasury$_fun_getCurrentRoomId INLINECALLDICT
    13 1 BLKDROP2
  }>
  %getHouseFeeBps PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    $Treasury$_fun_getHouseFeeBps INLINECALLDICT
    13 1 BLKDROP2
  }>
  %getHouseFeeDenominator PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    $Treasury$_fun_getHouseFeeDenominator INLINECALLDICT
    13 1 BLKDROP2
  }>
  %getRoomData PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    13 ROLL
    $Treasury$_fun_getRoomData INLINECALLDICT
    13 1 BLKDROP2
    $RoomData$_to_opt_external INLINECALLDICT
  }>
  %getWinnerReward PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    2 13 BLKSWAP
    $Treasury$_fun_getWinnerReward INLINECALLDICT
    13 1 BLKDROP2
  }>
  %getClaimedReward PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    2 13 BLKSWAP
    $Treasury$_fun_getClaimedReward INLINECALLDICT
    13 1 BLKDROP2
  }>
  %hasUserEntered PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    2 13 BLKSWAP
    $Treasury$_fun_hasUserEntered INLINECALLDICT
    13 1 BLKDROP2
  }>
  %computeEntryKey PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    2 13 BLKSWAP
    $Treasury$_fun_computeEntryKey INLINECALLDICT
    13 1 BLKDROP2
  }>
  %getMinEntryFee PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    $Treasury$_fun_getMinEntryFee INLINECALLDICT
    13 1 BLKDROP2
  }>
  %getMaxEntriesPerRoom PROC:<{
    $Treasury$_contract_load INLINECALLDICT
    $Treasury$_fun_getMaxEntriesPerRoom INLINECALLDICT
    13 1 BLKDROP2
  }>
  recv_internal PROC:<{
    c2 SAVE
    SAMEALTSAVE
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $Treasury$_contract_load INLINECALLDICT
    s0 s14 XCHG
    IFJMP:<{
      14 BLKDROP
    }>
    0 PUSHINT
    s13 PUSH
    SBITS
    DUP
    31 GTINT
    IF:<{
      NIP
      s0 s13 XCHG
      32 LDU
      OVER
      2616294104 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        s7 POP
        s12 POP
        s0 s5 XCHG
        32 LDU
        LDVARUINT16
        8 LDU
        DROP
        52447 PUSHINT
        __tact_context_get_sender INLINECALLDICT
        s14 PUSH
        SDEQ
        THROWANYIFNOT
        41956 PUSHINT
        s2 s14 PUSH2
        GEQ
        THROWANYIFNOT
        39893 PUSHINT
        OVER
        0 GTINT
        THROWANYIFNOT
        14506 PUSHINT
        OVER
        1000 PUSHINT
        LEQ
        THROWANYIFNOT
        40266 PUSHINT
        s3 PUSH
        0 GTINT
        THROWANYIFNOT
        s8 PUSH
        257 PUSHINT
        s4 PUSH
        __tact_dict_get_int_cell INLINECALLDICT
        $RoomData$_load_opt INLINECALLDICT
        27407 PUSHINT
        SWAP
        ISNULL
        THROWANYIFNOT
        1 PUSHINT
        0 PUSHINT
        s0 s0 PUSH2
            NOW
        OVER
        $RoomData$_constructor_entry_fee_winners_count_status_pool_total_entries_paid_hash_created_at_closed_at INLINECALLDICT
        s0 s7 XCHG
        s0 s6 XCHG
        s0 s5 XCHG
        s0 s4 XCHG
        s3 s1 s3 XCHG3
        257 PUSHINT
        s2 s8 XCHG2
        NEWC
        $RoomData$_store_cell INLINECALLDICT
        s2 PUSH
        s3 s9 XCHG
        SWAP
        __tact_dict_set_int_cell INLINECALLDICT
        s10 s12 XCHG
        s9 s11 XCHG
        s8 s10 XCHG
        s7 s9 XCHG
        s0 s8 XCHG
        s6 s7 XCHG
        s4 s6 XCHG
        s3 s5 XCHG
        s4 s3 s0 XCHG3
        s1 s2 XCHG
        $Treasury$_contract_store INLINECALLDICT
        RETALT
      }>
      OVER
      1380690280 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        s13 POP
        s0 s12 XCHG
        32 LDU
        LDVARUINT16
        DROP
        s8 PUSH
        257 PUSHINT
        s3 PUSH
        __tact_dict_get_int_cell INLINECALLDICT
        $RoomData$_load_opt INLINECALLDICT
        20618 PUSHINT
        OVER
        ISNULL
        NOT
        THROWANYIFNOT
        $RoomData$_not_null INLINECALLDICT
        5883 PUSHINT
        s6 PUSH
        1 EQINT
        THROWANYIFNOT
        s7 PUSH
        58501 PUSHINT
        s0 s10 XCHG
        EQUAL
        s1 s9 XCHG
        THROWANYIFNOT
        __tact_context_get_sender INLINECALLDICT
        s13 20 s() XCHG
        s12 19 s() XCHG
        s11 18 s() XCHG
        s10 17 s() XCHG
        s9 16 s() XCHG
        s8 s15 XCHG
        s7 s14 XCHG
        s6 20 s() XCHG
        s5 19 s() XCHG
        s4 18 s() XCHG
        s3 17 s() XCHG
        s2 21 s() XCHG
        s1 22 s() XCHG
        16 s() PUSH
        SWAP
        $Treasury$_fun_computeEntryKey INLINECALLDICT
        s7 PUSH
        257 PUSHINT
        s2 PUSH
        1 PUSHINT
        __tact_dict_get_int_int INLINECALLDICT
        26835 PUSHINT
        SWAP
        ISNULL
        THROWANYIFNOT
        62029 PUSHINT
        18 s() PUSH
        s3 PUSH
        LESS
        THROWANYIFNOT
        s14 PUSH
        __tact_context_get INLINECALLDICT
        $Context$_get_value INLINECALLDICT
        51351 PUSHINT
        s1 s2 XCPU
        EQUAL
        THROWANYIFNOT
        s0 s5 PUSH2
        MUL
        s5 PUSH
        DIV
        TUCK
        SUB
        s1 20 s() XCHG
        ADD
        s0 18 s() XCHG
        INC
        s6 s15 XCHG
        s5 21 s() XCHG
        s4 20 s() XCHG
        s3 18 s() XCHG
        s0 s2 XCHG
        s1 22 s() XCHG
        s0 23 s() XCHG
        257 PUSHINT
        s0 17 s() XCHG
        NEWC
        $RoomData$_store_cell INLINECALLDICT
        s3 s4 XCHG
        s10 s11 s0 XCHG3
        __tact_dict_set_int_cell INLINECALLDICT
        s1 s7 XCHG
        257 PUSHINT
        s0 s14 XCHG2
        TRUE
        1 PUSHINT
        __tact_dict_set_int_int INLINECALLDICT
        s9 PUSH
        0 GTINT
        IF:<{
              B{b5ee9c7241010101000f00001a00000000486f7573652046656509a96100} B>boc PUSHREF
          s5 s10 s10 PUXC2
          FALSE
          $SendParameters$_constructor_to_value_body_bounce INLINECALLDICT
              NEWC
              b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
              1 STI               // store `bounce`
              b{000} STSLICECONST // store bounced = false and src = addr_none
              STSLICE             // store `to`
              SWAP
              STGRAMS             // store `value`
              105 PUSHINT         // 1 + 4 + 4 + 64 + 32
              STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
              // → Stack state
              // s0: Builder
              // s1: `data`
              // s2: `code`
              // s3: `body`
              // s4: `mode`
              // Group 2: Placing the Builder after code and data, then checking those for nullability
              s2 XCHG0
              DUP2
              ISNULL
              SWAP
              ISNULL
              AND
              // → Stack state
              // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
              // s1: `code`
              // s2: `data`
              // s3: Builder
              // s4: `body`
              // s5: `mode`
              // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
              <{
                  DROP2 // drop `data` and `code`, since either of those is null
                  b{0} STSLICECONST
              }> PUSHCONT
              // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
              <{
                  // _ split_depth:(Maybe (## 5))
                  //   special:(Maybe TickTock)
                  //   code:(Maybe ^Cell)
                  //   data:(Maybe ^Cell)
                  //   library:(Maybe ^Cell)
                  // = StateInit;
                  ROT                // place message Builder on top
                  b{10} STSLICECONST // store Maybe = true, Either = false
                  // Start composing inlined StateInit
                  b{00} STSLICECONST // store split_depth and special first
                  STDICT             // store code
                  STDICT             // store data
                  b{0} STSLICECONST  // store library
              }> PUSHCONT
              // Group 3: IFELSE that does the branching shown above
              IFELSE
              // → Stack state
              // s0: Builder
              // s1: null or StateInit
              // s2: `body`
              // s3: `mode`
              // Group 4: Finalizing the message
              STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
              ENDC
              // → Stack state
              // s0: Cell
              // s1: `mode`
              // Group 5: Sending the message, with `mode` on top
              SWAP
              SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
        }>ELSE<{
          s9 POP
        }>
        s3 s12 XCHG
        s11 s10 s9 XCHG3
        s2 s8 XCHG
        s5 s7 XCHG
        s0 s1 s6 XCHG3
        s5 s5 XCHG2
        s0 s3 XCHG
        $Treasury$_contract_store INLINECALLDICT
        RETALT
      }>
      OVER
      2943936156 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        s13 POP
        s0 s12 XCHG
        32 LDU
        DROP
        55399 PUSHINT
        __tact_context_get_sender INLINECALLDICT
        s13 PUSH
        SDEQ
        THROWANYIFNOT
        s7 PUSH
        257 PUSHINT
        s2 PUSH
        __tact_dict_get_int_cell INLINECALLDICT
        $RoomData$_load_opt INLINECALLDICT
        14103 PUSHINT
        OVER
        ISNULL
        NOT
        THROWANYIFNOT
        $RoomData$_not_null INLINECALLDICT
        DROP
        5883 PUSHINT
        s0 s5 XCHG
        1 EQINT
        s1 s5 XCHG
        THROWANYIFNOT
        0 PUSHINT
            NOW
        s6 s7 XCHG
        s5 s7 XCHG
        s1 s4 XCHG
        s3 s3 s0 XCHG3
        257 PUSHINT
        s8 s8 XCHG2
        NEWC
        $RoomData$_store_cell INLINECALLDICT
        s3 s9 XCHG
        s1 s2 XCHG
        __tact_dict_set_int_cell INLINECALLDICT
        s10 s12 XCHG
        s9 s11 XCHG
        s8 s10 XCHG
        s7 s9 XCHG
        s0 s8 XCHG
        s5 s7 XCHG
        s4 s6 XCHG
        s3 s5 XCHG
        s4 s3 s0 XCHG3
        $Treasury$_contract_store INLINECALLDICT
        RETALT
      }>
      OVER
      3561099507 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        s13 POP
        s0 s12 XCHG
        32 LDU
        8 LDU
        LDDICT
        DROP
        60267 PUSHINT
        __tact_context_get_sender INLINECALLDICT
        s15 PUSH
        SDEQ
        THROWANYIFNOT
        s9 PUSH
        257 PUSHINT
        s4 PUSH
        __tact_dict_get_int_cell INLINECALLDICT
        $RoomData$_load_opt INLINECALLDICT
        14103 PUSHINT
        OVER
        ISNULL
        NOT
        THROWANYIFNOT
        $RoomData$_not_null INLINECALLDICT
        50845 PUSHINT
        s0 s6 XCHG
        0 EQINT
        s1 s6 XCHG
        THROWANYIFNOT
        16751 PUSHINT
        s0 s2 XCHG
        0 EQINT
        s1 s2 XCHG
        THROWANYIFNOT
        62631 PUSHINT
        s8 s5 PUSH2
        EQUAL
        THROWANYIFNOT
        s2 s7 PUSH2
        DIV
        0 PUSHINT
        s0 s9 XCHG
        REPEAT:<{
          s7 PUSH
          257 PUSHINT
          s10 PUSH
          __tact_dict_get_int_slice INLINECALLDICT
          DUP
          ISNULL
          NOT
          IF:<{
            __tact_not_null INLINECALLDICT
            s14 PUSH
            267 PUSHINT
            s2 PUSH
            257 PUSHINT
            __tact_dict_get_slice_int INLINECALLDICT
            0 PUSHINT
            OVER
            ISNULL
            NOT
            IF:<{
              DROP
              __tact_not_null INLINECALLDICT
            }>ELSE<{
              NIP
            }>
            267 PUSHINT
            s1 s3 XCPU
            ADD
            s3 16 s() XCHG
            s1 s2 XCHG
            257 PUSHINT
            __tact_dict_set_slice_int INLINECALLDICT
            s0 s13 XCHG
          }>ELSE<{
            DROP
          }>
          s0 s8 XCHG
          INC
          s0 s8 XCHG
        }>
        DROP
        s6 POP
        s6 POP
        2 PUSHINT
            NOW
        s5 s6 XCHG
        s1 s4 XCHG
        s3 s5 s0 XCHG3
        s2 s7 XCHG
        257 PUSHINT
        s2 s8 XCHG2
        NEWC
        $RoomData$_store_cell INLINECALLDICT
        s3 s9 XCHG
        s1 s2 XCHG
        __tact_dict_set_int_cell INLINECALLDICT
        s10 s12 XCHG
        s9 s11 XCHG
        s8 s10 XCHG
        s7 s9 XCHG
        s0 s8 XCHG
        s5 s7 XCHG
        s4 s6 XCHG
        s3 s5 XCHG
        s4 s3 s0 XCHG3
        $Treasury$_contract_store INLINECALLDICT
        RETALT
      }>
      OVER
      850355063 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        s13 POP
        s0 s12 XCHG
        32 LDU
        DROP
        24070 PUSHINT
        __tact_context_get_sender INLINECALLDICT
        s13 PUSH
        SDEQ
        THROWANYIFNOT
        s7 PUSH
        257 PUSHINT
        s2 PUSH
        __tact_dict_get_int_cell INLINECALLDICT
        $RoomData$_load_opt INLINECALLDICT
        14103 PUSHINT
        OVER
        ISNULL
        NOT
        THROWANYIFNOT
        $RoomData$_not_null INLINECALLDICT
        DROP
        56758 PUSHINT
        s0 s5 XCHG
        1 EQINT
        s1 s5 XCHG
        THROWANYIFNOT
        26225 PUSHINT
        s2 PUSH
        0 GTINT
        THROWANYIFNOT
        0 PUSHINT
            NOW
        s6 s7 XCHG
        s5 s7 XCHG
        s1 s4 XCHG
        s3 s3 s0 XCHG3
        257 PUSHINT
        s8 s8 XCHG2
        NEWC
        $RoomData$_store_cell INLINECALLDICT
        s3 s9 XCHG
        s1 s2 XCHG
        __tact_dict_set_int_cell INLINECALLDICT
        s10 s12 XCHG
        s9 s11 XCHG
        s8 s10 XCHG
        s7 s9 XCHG
        s0 s8 XCHG
        s5 s7 XCHG
        s4 s6 XCHG
        s3 s5 XCHG
        s4 s3 s0 XCHG3
        $Treasury$_contract_store INLINECALLDICT
        RETALT
      }>
      OVER
      1385066661 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        s13 POP
        s0 s12 XCHG
        32 LDU
        DROP
        __tact_context_get_sender INLINECALLDICT
        257 PUSHINT
        s9 s0 s2 PUXC2
        __tact_dict_get_int_cell INLINECALLDICT
        $RoomData$_load_opt INLINECALLDICT
        14103 PUSHINT
        OVER
        ISNULL
        NOT
        THROWANYIFNOT
        $RoomData$_not_null INLINECALLDICT
        s5 s6 XCHG
        6 BLKDROP
        10215 PUSHINT
        s2 POP
        2 EQINT
        THROWANYIFNOT
        s4 PUSH
        267 PUSHINT
        s2 PUSH
        257 PUSHINT
        __tact_dict_get_slice_int INLINECALLDICT
        6225 PUSHINT
        OVER
        ISNULL
        NOT
        THROWANYIFNOT
        0 PUSHINT
        s5 PUSH
        267 PUSHINT
        s4 PUSH
        257 PUSHINT
        __tact_dict_get_slice_int INLINECALLDICT
        DUP
        ISNULL
        NOT
        IF:<{
          NIP
          __tact_not_null INLINECALLDICT
        }>ELSE<{
          DROP
        }>
        SWAP
        __tact_not_null INLINECALLDICT
        OVER
        SUB
        43137 PUSHINT
        OVER
        0 GTINT
        THROWANYIFNOT
            B{b5ee9c724101010100120000200000000052657761726420436c61696d46f5a0f8} B>boc PUSHREF
        FALSE
        s4 PUSH
        s3 s2 s(-1) PUXC2
        $SendParameters$_constructor_to_value_body_bounce INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            AND
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
        SWAP
        267 PUSHINT
        s0 s2 XCHG
        ADD
        s3 s5 XCHG
        s1 s2 XCHG
        257 PUSHINT
        __tact_dict_set_slice_int INLINECALLDICT
        s10 s12 XCHG
        s9 s11 XCHG
        s8 s10 XCHG
        s7 s9 XCHG
        s6 s8 XCHG
        s5 s7 XCHG
        s4 s6 XCHG
        s3 s5 XCHG
        s3 s4 XCHG2
        $Treasury$_contract_store INLINECALLDICT
        RETALT
      }>
      s0 s14 XCHG
    }>
    OVER
    0 EQINT
    OVER
    33 LESSINT
    AND
    IFJMP:<{
      2DROP
      s12 POP
      s10 s12 XCHG
      2 10 BLKSWAP
      $Treasury$_contract_store INLINECALLDICT
    }>
    s0 s14 XCHG
    HASHSU
    DUP
    78757795652542414393474882215661487212723556572562023039495818662823781219511 PUSHINT
    EQUAL
    IFJMP:<{
      2DROP
      s12 POP
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      s1 s9 XCHG
      ADD
      s10 s12 XCHG
      s9 s11 XCHG
      s0 s10 XCHG
      s7 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      $Treasury$_contract_store INLINECALLDICT
    }>
    57264055919619110494171454587088091180320136340382694066611435050529519806613 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      s12 POP
      58627 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s12 PUSH
      SDEQ
      THROWANYIFNOT
      49080 PUSHINT
      s9 PUSH
      0 GTINT
      THROWANYIFNOT
      s0 s7 XCHG
      INC
      s0 s8 XCHG
      1 RSHIFT#
      DUP
      10 PUSHINT
      DIV
      NIP
      DUP
      0 GTINT
      IF:<{
        __tact_context_get_sender INLINECALLDICT
            B{b5ee9c7241010101001800002c00000000546f702053636f7265722041697264726f706da78ddf} B>boc PUSHREF
        s1 s2 XCHG
        FALSE
        $SendParameters$_constructor_to_value_body_bounce INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            AND
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      }>ELSE<{
        DROP
      }>
      s9 s11 XCHG
      s8 s10 XCHG
      0 PUSHINT
      s0 s10 XCHG
      s8 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      s1 s2 XCHG
      $Treasury$_contract_store INLINECALLDICT
    }>
    0 EQINT
    IF:<{
      s0 s12 XCHG
      31 GTINT
      IFJMP:<{
        s10 s12 XCHG
        2 10 BLKSWAP
        $Treasury$_contract_store INLINECALLDICT
        RETALT
      }>
      13 BLKDROP
    }>ELSE<{
      14 BLKDROP
    }>
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                    swap
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop
                    }
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll
                    {
                        // If the dict is empty, throw 11
                        11 THROWARG
                    }
                    {
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX
                    } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
