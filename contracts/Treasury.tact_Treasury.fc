#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; Treasury.tact_Treasury.headers.fc
;;
;; Header files for Treasury
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_dict_get_int_int
int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline;

;; __tact_dict_set_int_int
(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v, builder b) inline;

;; $Treasury$_store
builder $Treasury$_store(builder build_0, (slice, slice, int, cell, int, int, int) v) inline;

;; $Treasury$_load
(slice, ((slice, slice, int, cell, int, int, int))) $Treasury$_load(slice sc_0) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $Treasury$init$_load
(slice, ((slice, slice))) $Treasury$init$_load(slice sc_0) inline;

;; $Treasury$_contract_init
(slice, slice, int, cell, int, int, int) $Treasury$_contract_init(slice $owner, slice $upgrade_authority) impure inline;

;; $Treasury$_contract_load
(slice, slice, int, cell, int, int, int) $Treasury$_contract_load() impure inline;

;; $Treasury$_contract_store
() $Treasury$_contract_store((slice, slice, int, cell, int, int, int) v) impure inline;

;; $MessageParameters$_constructor_bounce_to_value_mode_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline;

;; $Treasury$_fun_notify
((slice, slice, int, cell, int, int, int), ()) $Treasury$_fun_notify((slice, slice, int, cell, int, int, int) $self, cell $body) impure inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;

;; $SendParameters$_constructor_to_value_body_bounce
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_body_bounce(slice $to, int $value, cell $body, int $bounce) inline;


;; Treasury.tact_Treasury.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

forall X -> X __tact_not_null(X x) impure inline {
    throw_if(128, null?(x)); return x;
}

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline {
    var (r, ok) = idict_get?(d, kl, k);
    if (ok) {
        return r~load_int(vl);
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) inline {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
    }
}

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_message((int, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
    STZEROES
    // → Stack state
    // s0: Builder
    // s1: `body`
    // s2: `mode`
    STDICT
    ENDC
    SWAP
    SENDRAWMSG
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    AND
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

((slice, slice, int, cell, int, int, int), ()) $Treasury$_fun_notify((slice, slice, int, cell, int, int, int) $self, cell $body) impure inline {
    var (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'rooms, $self'current_active_room, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR)) = $self;
    slice $to = __tact_context_get_sender();
    int $bounce = false;
    if (false) {
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $Context$_get_value(__tact_context_get()));
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_message($MessageParameters$_constructor_bounce_to_value_mode_body($bounce, $to, 0, 130, $body));
            return (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'rooms, $self'current_active_room, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR), ());
        }
    }
    $global_message($MessageParameters$_constructor_bounce_to_value_mode_body($bounce, $to, 0, 66, $body));
    return (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'rooms, $self'current_active_room, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR), ());
}

;; Treasury.tact_Treasury.constants.fc
;; Cell wcdeuITJZFGT8rWDI+zn3mKfS2MXMWQGFvD+gtE30u0=
cell __gen_cell_cell_c1c75eb884c9645193f2b58323ece7de629f4b631731640616f0fe82d137d2ed() asm """
    B{b5ee9c724101010100130000220000000045786365737320726566756e64bdb5887c} B>boc PUSHREF
""";

;; Cell m1iQqIuUB2ieAFHC+qAVdMOiBSFOZueQWaAx8MUOvDg=
cell __gen_cell_cell_9b5890a88b9407689e0051c2faa01574c3a205214e66e79059a031f0c50ebc38() asm """
    B{b5ee9c72410101010016000028000000004f776e6572205769746864726177616cb3c1be94} B>boc PUSHREF
""";

;; Treasury.tact_Treasury.storage.fc
;;
;; Type: Context
;; TLB: _ bounceable:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounceable, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_body_bounce(slice $to, int $value, cell $body, int $bounce) inline {
    return (0, $body, null(), null(), $value, $to, $bounce);
}

;;
;; Type: MessageParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 to:address bounce:bool = MessageParameters
;;

((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, $value, $to, $bounce);
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v, builder b) inline {
    return $DeployOk$_store(b, v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: Treasury
;; TLB: _ owner:address upgrade_authority:address airdrop_pool:int257 rooms:dict<int, int> current_active_room:int257 HOUSE_FEE_BPS:int257 HOUSE_FEE_DENOMINATOR:int257 = Treasury
;;

builder $Treasury$_store(builder build_0, (slice, slice, int, cell, int, int, int) v) inline {
    var (v'owner, v'upgrade_authority, v'airdrop_pool, v'rooms, v'current_active_room, v'HOUSE_FEE_BPS, v'HOUSE_FEE_DENOMINATOR) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_slice(v'upgrade_authority);
    build_0 = build_0.store_int(v'airdrop_pool, 257);
    build_0 = build_0.store_dict(v'rooms);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'current_active_room, 257);
    build_1 = build_1.store_int(v'HOUSE_FEE_BPS, 257);
    build_1 = build_1.store_int(v'HOUSE_FEE_DENOMINATOR, 257);
    build_0 = store_builder_ref(build_0, build_1);
    return build_0;
}

(slice, ((slice, slice, int, cell, int, int, int))) $Treasury$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'upgrade_authority = sc_0~load_msg_addr();
    var v'airdrop_pool = sc_0~load_int(257);
    var v'rooms = sc_0~load_dict();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'current_active_room = sc_1~load_int(257);
    var v'HOUSE_FEE_BPS = sc_1~load_int(257);
    var v'HOUSE_FEE_DENOMINATOR = sc_1~load_int(257);
    return (sc_0, (v'owner, v'upgrade_authority, v'airdrop_pool, v'rooms, v'current_active_room, v'HOUSE_FEE_BPS, v'HOUSE_FEE_DENOMINATOR));
}

(slice, ((slice, slice))) $Treasury$init$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'upgrade_authority = sc_0~load_msg_addr();
    return (sc_0, (v'owner, v'upgrade_authority));
}

(slice, slice, int, cell, int, int, int) $Treasury$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Treasury$_load();
    }
    else {
        (slice $owner, slice $upgrade_authority) = $sc~$Treasury$init$_load();
        $sc.end_parse();
        return $Treasury$_contract_init($owner, $upgrade_authority);
    }
}

() $Treasury$_contract_store((slice, slice, int, cell, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $Treasury$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract Treasury functions
;;

(slice, slice, int, cell, int, int, int) $Treasury$_contract_init(slice $owner, slice $upgrade_authority) impure inline {
    var (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'rooms, $self'current_active_room, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR)) = (null(), null(), null(), null(), null(), 250, 10000);
    $self'owner = $owner;
    $self'upgrade_authority = $upgrade_authority;
    $self'airdrop_pool = 0;
    $self'current_active_room = 0;
    return ($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'rooms, $self'current_active_room, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR);
}

;;
;; Get methods of a Contract Treasury
;;

;;
;; Routing of a Contract Treasury
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'rooms, $self'current_active_room, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR) = $Treasury$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
        ;; Receive Deploy message
        if (op == 0x946a98b6) {
            var $deploy'queryId = in_msg~load_uint(64);
            ($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'rooms, $self'current_active_room, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR)~$Treasury$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId), begin_cell()));
            $Treasury$_contract_store(($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'rooms, $self'current_active_room, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR));
            return ();
        }
        
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "open_room" message
    if (text_op == 0x90749feb14c2fda253536c99587706f062ad151ec413d58a3a06028f7cced1a7) {
        int $room_key = 20250101;
        int $entry_fee = 1000000000;
        int $winners_count = 100;
        int $existing_room = __tact_dict_get_int_int($self'rooms, 257, $room_key, 257);
        throw_unless(27407, null?($existing_room));
        int $room_data = (((($entry_fee + ($winners_count << 32)) + 1099511627776) + 0) + 0);
        $self'rooms~__tact_dict_set_int_int(257, $room_key, $room_data, 257);
        $self'current_active_room = $room_key;
        $Treasury$_contract_store(($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'rooms, $self'current_active_room, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR));
        return ();
    }
    ;; Receive "enter_paid" message
    if (text_op == 0x1965172e995d3dfe36ccfac1fd31d9136f9e96ef54ab2dcf5e85043fc7c57a7e) {
        int $room_key = $self'current_active_room;
        throw_unless(60719, ($room_key > 0));
        int $room_data = __tact_dict_get_int_int($self'rooms, 257, $room_key, 257);
        throw_unless(14103, (~ null?($room_data)));
        int $entry_fee = (__tact_not_null($room_data) & 4294967295);
        int $winners_count = ((__tact_not_null($room_data) >> 32) & 255);
        int $status = ((__tact_not_null($room_data) >> 40) & 255);
        int $pool = ((__tact_not_null($room_data) >> 48) & 18446744073709551615);
        int $total_entries = ((__tact_not_null($room_data) >> 96) & 4294967295);
        throw_unless(5883, ($status == 1));
        int $received_amount = $Context$_get_value(__tact_context_get());
        int $min_gas_fee = 50000000;
        int $max_gas_fee = 100000000;
        int $min_required = $entry_fee;
        int $max_required = ($entry_fee + $max_gas_fee);
        throw_unless(20096, ($received_amount >= $min_required));
        throw_unless(63002, ($received_amount <= $max_required));
        int $house_fee = (($entry_fee * $self'HOUSE_FEE_BPS) / $self'HOUSE_FEE_DENOMINATOR);
        int $pool_contribution = ($entry_fee - $house_fee);
        int $new_pool = ($pool + $pool_contribution);
        int $new_total_entries = ($total_entries + 1);
        int $new_room_data = (((($entry_fee + ($winners_count << 32)) + ($status << 40)) + ($new_pool << 48)) + ($new_total_entries << 96));
        $self'rooms~__tact_dict_set_int_int(257, $room_key, $new_room_data, 257);
        int $excess_amount = ($received_amount - $entry_fee);
        if (($excess_amount > 0)) {
            $global_send($SendParameters$_constructor_to_value_body_bounce(__tact_context_get_sender(), $excess_amount, __gen_cell_cell_c1c75eb884c9645193f2b58323ece7de629f4b631731640616f0fe82d137d2ed(), false));
        }
        $Treasury$_contract_store(($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'rooms, $self'current_active_room, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR));
        return ();
    }
    ;; Receive "close_room" message
    if (text_op == 0xda18ac76f0b7a9f079b0d3acde58803199dd9e46738a934e5c963bc0a2485b95) {
        int $room_key = $self'current_active_room;
        throw_unless(60719, ($room_key > 0));
        int $room_data = __tact_dict_get_int_int($self'rooms, 257, $room_key, 257);
        throw_unless(14103, (~ null?($room_data)));
        int $entry_fee = (__tact_not_null($room_data) & 4294967295);
        int $winners_count = ((__tact_not_null($room_data) >> 32) & 255);
        int $pool = ((__tact_not_null($room_data) >> 48) & 18446744073709551615);
        int $total_entries = ((__tact_not_null($room_data) >> 96) & 4294967295);
        int $new_room_data = (((($entry_fee + ($winners_count << 32)) + 0) + ($pool << 48)) + ($total_entries << 96));
        $self'rooms~__tact_dict_set_int_int(257, $room_key, $new_room_data, 257);
        $self'current_active_room = 0;
        $Treasury$_contract_store(($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'rooms, $self'current_active_room, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR));
        return ();
    }
    ;; Receive "fund_airdrop" message
    if (text_op == 0xae1f55287d6c4d2042cc5941a8a23c971d49bf5e554d4fa78ae730638e083cb7) {
        $self'airdrop_pool = ($self'airdrop_pool + $Context$_get_value(__tact_context_get()));
        $Treasury$_contract_store(($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'rooms, $self'current_active_room, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR));
        return ();
    }
    ;; Receive "withdraw_owner" message
    if (text_op == 0x7a30a75847a91ec28530dee9e62e368bbe2b319683b6acfe75a0c9337c8cc078) {
        throw_unless(26825, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
        int $withdrawal_amount = 1000000000;
        int $contract_balance = $global_myBalance();
        throw_unless(55591, ($withdrawal_amount <= $contract_balance));
        $global_send($SendParameters$_constructor_to_value_body_bounce($self'owner, $withdrawal_amount, __gen_cell_cell_9b5890a88b9407689e0051c2faa01574c3a205214e66e79059a031f0c50ebc38(), false));
        $Treasury$_contract_store(($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'rooms, $self'current_active_room, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.

            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack

            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                swap

                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap

                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop
                }
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond

                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll
                {
                    // If the dict is empty, throw 11
                    11 THROWARG
                }
                {
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX
                } cond
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}