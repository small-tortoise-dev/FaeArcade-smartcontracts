#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; Treasury.tact_Treasury.headers.fc
;;
;; Header files for Treasury
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_int_slice
slice __tact_dict_get_int_slice(cell d, int kl, int k) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; $RoomData$_store
builder $RoomData$_store(builder build_0, (int, int, int, int, int, int, int, int) v) inline;

;; $RoomData$_store_cell
cell $RoomData$_store_cell((int, int, int, int, int, int, int, int) v, builder b) inline;

;; $RoomData$_load
(slice, ((int, int, int, int, int, int, int, int))) $RoomData$_load(slice sc_0) inline;

;; $RoomData$_as_optional
tuple $RoomData$_as_optional((int, int, int, int, int, int, int, int) v) inline;

;; $RoomData$_load_opt
tuple $RoomData$_load_opt(cell cl) inline;

;; $Treasury$_store
builder $Treasury$_store(builder build_0, (slice, slice, int, int, cell, int, cell, cell, int, int) v) inline;

;; $Treasury$_load
(slice, ((slice, slice, int, int, cell, int, cell, cell, int, int))) $Treasury$_load(slice sc_0) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $RoomData$_not_null
((int, int, int, int, int, int, int, int)) $RoomData$_not_null(tuple v) inline;

;; $RoomData$_to_tuple
tuple $RoomData$_to_tuple(((int, int, int, int, int, int, int, int)) v) inline;

;; $RoomData$_to_opt_tuple
tuple $RoomData$_to_opt_tuple(tuple v) inline;

;; $RoomData$_to_opt_external
tuple $RoomData$_to_opt_external(tuple v) inline;

;; $Treasury$init$_load
(slice, ((slice, slice))) $Treasury$init$_load(slice sc_0) inline;

;; $Treasury$_contract_init
(slice, slice, int, int, cell, int, cell, cell, int, int) $Treasury$_contract_init(slice $owner, slice $upgrade_authority) impure inline;

;; $Treasury$_contract_load
(slice, slice, int, int, cell, int, cell, cell, int, int) $Treasury$_contract_load() impure inline;

;; $Treasury$_contract_store
() $Treasury$_contract_store((slice, slice, int, int, cell, int, cell, cell, int, int) v) impure inline;

;; $Treasury$_fun_getOwner
((slice, slice, int, int, cell, int, cell, cell, int, int), slice) $Treasury$_fun_getOwner((slice, slice, int, int, cell, int, cell, cell, int, int) $self) impure inline_ref;

;; $Treasury$_fun_getUpgradeAuthority
((slice, slice, int, int, cell, int, cell, cell, int, int), slice) $Treasury$_fun_getUpgradeAuthority((slice, slice, int, int, cell, int, cell, cell, int, int) $self) impure inline_ref;

;; $Treasury$_fun_getAirdropPool
((slice, slice, int, int, cell, int, cell, cell, int, int), int) $Treasury$_fun_getAirdropPool((slice, slice, int, int, cell, int, cell, cell, int, int) $self) impure inline_ref;

;; $Treasury$_fun_getAirdropId
((slice, slice, int, int, cell, int, cell, cell, int, int), int) $Treasury$_fun_getAirdropId((slice, slice, int, int, cell, int, cell, cell, int, int) $self) impure inline_ref;

;; $Treasury$_fun_getCurrentRoomId
((slice, slice, int, int, cell, int, cell, cell, int, int), int) $Treasury$_fun_getCurrentRoomId((slice, slice, int, int, cell, int, cell, cell, int, int) $self) impure inline_ref;

;; $Treasury$_fun_getHouseFeeBps
((slice, slice, int, int, cell, int, cell, cell, int, int), int) $Treasury$_fun_getHouseFeeBps((slice, slice, int, int, cell, int, cell, cell, int, int) $self) impure inline_ref;

;; $Treasury$_fun_getHouseFeeDenominator
((slice, slice, int, int, cell, int, cell, cell, int, int), int) $Treasury$_fun_getHouseFeeDenominator((slice, slice, int, int, cell, int, cell, cell, int, int) $self) impure inline_ref;

;; $Treasury$_fun_getRoomData
((slice, slice, int, int, cell, int, cell, cell, int, int), tuple) $Treasury$_fun_getRoomData((slice, slice, int, int, cell, int, cell, cell, int, int) $self, int $room_key) impure inline_ref;

;; $Treasury$_fun_getWinnerReward
((slice, slice, int, int, cell, int, cell, cell, int, int), int) $Treasury$_fun_getWinnerReward((slice, slice, int, int, cell, int, cell, cell, int, int) $self, int _0, slice $addr) impure inline_ref;

;; $Treasury$_fun_getClaimedReward
((slice, slice, int, int, cell, int, cell, cell, int, int), int) $Treasury$_fun_getClaimedReward((slice, slice, int, int, cell, int, cell, cell, int, int) $self, int _0, slice $addr) impure inline_ref;

;; $RoomData$_constructor_entry_fee_winners_count_status_pool_total_entries_paid_hash_created_at_closed_at
((int, int, int, int, int, int, int, int)) $RoomData$_constructor_entry_fee_winners_count_status_pool_total_entries_paid_hash_created_at_closed_at(int $entry_fee, int $winners_count, int $status, int $pool, int $total_entries, int $paid_hash, int $created_at, int $closed_at) inline;

;; $SendParameters$_constructor_to_value_body_bounce
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_body_bounce(slice $to, int $value, cell $body, int $bounce) inline;


;; Treasury.tact_Treasury.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

forall X -> X __tact_not_null(X x) impure inline {
    throw_if(128, null?(x)); return x;
}

(cell, int) __tact_dict_delete(cell dict, int key_len, slice index) asm(index dict key_len) """
    DICTDEL
""";

(slice, int) __tact_dict_get(cell dict, int key_len, slice index) asm(index dict key_len) """
    DICTGET NULLSWAPIFNOT
""";

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

forall X0, X1, X2, X3, X4, X5, X6, X7 -> tuple __tact_tuple_create_8((X0, X1, X2, X3, X4, X5, X6, X7) v) asm """
    8 TUPLE
""";

forall X0, X1, X2, X3, X4, X5, X6, X7 -> (X0, X1, X2, X3, X4, X5, X6, X7) __tact_tuple_destroy_8(tuple v) asm """
    8 UNTUPLE
""";

int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline {
    var (r, ok) = __tact_dict_get(d, kl, k);
    if (ok) {
        return r~load_int(vl);
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return (dict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
    }
}

slice __tact_dict_get_int_slice(cell d, int kl, int k) inline {
    var (r, ok) = idict_get?(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

cell __tact_dict_get_int_cell(cell d, int kl, int k) inline {
    var (r, ok) = idict_get_ref?(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_ref(d, kl, k, v), ());
    }
}

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    AND
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

int $global_now() impure asm """
    NOW
""";

;; Treasury.tact_Treasury.constants.fc
;; Cell bRqN7k0qGwJjaSIcBXCboVhmxcO0veRIzAxKjoQgKk8=
cell __gen_cell_cell_6d1a8dee4d2a1b026369221c05709ba15866c5c3b4bde448cc0c4a8e84202a4f() asm """
    B{b5ee9c7241010101000f00001a00000000486f7573652046656509a96100} B>boc PUSHREF
""";

;; Cell W3UAJLf4sCaSPUdwIxSoStvuulbk/k0KgRdvhM/9rLs=
cell __gen_cell_cell_5b750024b7f8b026923d47702314a84adbeeba56e4fe4d0a81176f84cffdacbb() asm """
    B{b5ee9c724101010100120000200000000052657761726420436c61696d46f5a0f8} B>boc PUSHREF
""";

;; Cell BcdzXVFdGuoKFD7QWWuEvQtH/uI4tFqu68ldH3VLkpU=
cell __gen_cell_cell_05c7735d515d1aea0a143ed0596b84bd0b47fee238b45aaeebc95d1f754b9295() asm """
    B{b5ee9c7241010101001800002c00000000546f702053636f7265722041697264726f706da78ddf} B>boc PUSHREF
""";

;; Treasury.tact_Treasury.storage.fc
;;
;; Type: Context
;; TLB: _ bounceable:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounceable, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_body_bounce(slice $to, int $value, cell $body, int $bounce) inline {
    return (0, $body, null(), null(), $value, $to, $bounce);
}

;;
;; Type: RoomData
;; TLB: _ entry_fee:int257 winners_count:int257 status:int257 pool:int257 total_entries:int257 paid_hash:int257 created_at:int257 closed_at:int257 = RoomData
;;

builder $RoomData$_store(builder build_0, (int, int, int, int, int, int, int, int) v) inline {
    var (v'entry_fee, v'winners_count, v'status, v'pool, v'total_entries, v'paid_hash, v'created_at, v'closed_at) = v;
    build_0 = build_0.store_int(v'entry_fee, 257);
    build_0 = build_0.store_int(v'winners_count, 257);
    build_0 = build_0.store_int(v'status, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'pool, 257);
    build_1 = build_1.store_int(v'total_entries, 257);
    build_1 = build_1.store_int(v'paid_hash, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'created_at, 257);
    build_2 = build_2.store_int(v'closed_at, 257);
    build_1 = store_builder_ref(build_1, build_2);
    build_0 = store_builder_ref(build_0, build_1);
    return build_0;
}

cell $RoomData$_store_cell((int, int, int, int, int, int, int, int) v, builder b) inline {
    return $RoomData$_store(b, v).end_cell();
}

(slice, ((int, int, int, int, int, int, int, int))) $RoomData$_load(slice sc_0) inline {
    var v'entry_fee = sc_0~load_int(257);
    var v'winners_count = sc_0~load_int(257);
    var v'status = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'pool = sc_1~load_int(257);
    var v'total_entries = sc_1~load_int(257);
    var v'paid_hash = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'created_at = sc_2~load_int(257);
    var v'closed_at = sc_2~load_int(257);
    return (sc_0, (v'entry_fee, v'winners_count, v'status, v'pool, v'total_entries, v'paid_hash, v'created_at, v'closed_at));
}

tuple $RoomData$_as_optional((int, int, int, int, int, int, int, int) v) inline {
    var (v'entry_fee, v'winners_count, v'status, v'pool, v'total_entries, v'paid_hash, v'created_at, v'closed_at) = v;
    return __tact_tuple_create_8(v'entry_fee, v'winners_count, v'status, v'pool, v'total_entries, v'paid_hash, v'created_at, v'closed_at);
}

tuple $RoomData$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $RoomData$_as_optional(sc~$RoomData$_load());
}

((int, int, int, int, int, int, int, int)) $RoomData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'entry_fee, int vvv'winners_count, int vvv'status, int vvv'pool, int vvv'total_entries, int vvv'paid_hash, int vvv'created_at, int vvv'closed_at) = __tact_tuple_destroy_8(v);
    return (vvv'entry_fee, vvv'winners_count, vvv'status, vvv'pool, vvv'total_entries, vvv'paid_hash, vvv'created_at, vvv'closed_at);
}

tuple $RoomData$_to_tuple(((int, int, int, int, int, int, int, int)) v) inline {
    var (v'entry_fee, v'winners_count, v'status, v'pool, v'total_entries, v'paid_hash, v'created_at, v'closed_at) = v;
    return __tact_tuple_create_8(v'entry_fee, v'winners_count, v'status, v'pool, v'total_entries, v'paid_hash, v'created_at, v'closed_at);
}

tuple $RoomData$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $RoomData$_to_tuple($RoomData$_not_null(v)); 
}

tuple $RoomData$_to_opt_external(tuple v) inline {
    var loaded = $RoomData$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((int, int, int, int, int, int, int, int)) $RoomData$_constructor_entry_fee_winners_count_status_pool_total_entries_paid_hash_created_at_closed_at(int $entry_fee, int $winners_count, int $status, int $pool, int $total_entries, int $paid_hash, int $created_at, int $closed_at) inline {
    return ($entry_fee, $winners_count, $status, $pool, $total_entries, $paid_hash, $created_at, $closed_at);
}

;;
;; Type: Treasury
;; TLB: _ owner:address upgrade_authority:address airdrop_pool:int257 airdrop_id:int257 rooms:dict<int, ^RoomData{entry_fee:int257,winners_count:int257,status:int257,pool:int257,total_entries:int257,paid_hash:int257,created_at:int257,closed_at:int257}> current_room_id:int257 winner_rewards:dict<address, int> claimed_rewards:dict<address, int> HOUSE_FEE_BPS:int257 HOUSE_FEE_DENOMINATOR:int257 = Treasury
;;

builder $Treasury$_store(builder build_0, (slice, slice, int, int, cell, int, cell, cell, int, int) v) inline {
    var (v'owner, v'upgrade_authority, v'airdrop_pool, v'airdrop_id, v'rooms, v'current_room_id, v'winner_rewards, v'claimed_rewards, v'HOUSE_FEE_BPS, v'HOUSE_FEE_DENOMINATOR) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_slice(v'upgrade_authority);
    build_0 = build_0.store_int(v'airdrop_pool, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'airdrop_id, 257);
    build_1 = build_1.store_dict(v'rooms);
    build_1 = build_1.store_int(v'current_room_id, 257);
    build_1 = build_1.store_dict(v'winner_rewards);
    build_1 = build_1.store_dict(v'claimed_rewards);
    build_1 = build_1.store_int(v'HOUSE_FEE_BPS, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'HOUSE_FEE_DENOMINATOR, 257);
    build_1 = store_builder_ref(build_1, build_2);
    build_0 = store_builder_ref(build_0, build_1);
    return build_0;
}

(slice, ((slice, slice, int, int, cell, int, cell, cell, int, int))) $Treasury$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'upgrade_authority = sc_0~load_msg_addr();
    var v'airdrop_pool = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'airdrop_id = sc_1~load_int(257);
    var v'rooms = sc_1~load_dict();
    var v'current_room_id = sc_1~load_int(257);
    var v'winner_rewards = sc_1~load_dict();
    var v'claimed_rewards = sc_1~load_dict();
    var v'HOUSE_FEE_BPS = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'HOUSE_FEE_DENOMINATOR = sc_2~load_int(257);
    return (sc_0, (v'owner, v'upgrade_authority, v'airdrop_pool, v'airdrop_id, v'rooms, v'current_room_id, v'winner_rewards, v'claimed_rewards, v'HOUSE_FEE_BPS, v'HOUSE_FEE_DENOMINATOR));
}

(slice, ((slice, slice))) $Treasury$init$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'upgrade_authority = sc_0~load_msg_addr();
    return (sc_0, (v'owner, v'upgrade_authority));
}

(slice, slice, int, int, cell, int, cell, cell, int, int) $Treasury$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Treasury$_load();
    }
    else {
        (slice $owner, slice $upgrade_authority) = $sc~$Treasury$init$_load();
        $sc.end_parse();
        return $Treasury$_contract_init($owner, $upgrade_authority);
    }
}

() $Treasury$_contract_store((slice, slice, int, int, cell, int, cell, cell, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $Treasury$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract Treasury functions
;;

(slice, slice, int, int, cell, int, cell, cell, int, int) $Treasury$_contract_init(slice $owner, slice $upgrade_authority) impure inline {
    var (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR)) = (null(), null(), null(), null(), null(), null(), null(), null(), 250, 10000);
    $self'owner = $owner;
    $self'upgrade_authority = $upgrade_authority;
    $self'airdrop_pool = 0;
    $self'airdrop_id = 0;
    $self'current_room_id = 0;
    return ($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR);
}

((slice, slice, int, int, cell, int, cell, cell, int, int), slice) $Treasury$_fun_getOwner((slice, slice, int, int, cell, int, cell, cell, int, int) $self) impure inline_ref {
    var (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR)) = $self;
    var $fresh$ret_0 = $self'owner;
    return (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR), $fresh$ret_0);
}

((slice, slice, int, int, cell, int, cell, cell, int, int), slice) $Treasury$_fun_getUpgradeAuthority((slice, slice, int, int, cell, int, cell, cell, int, int) $self) impure inline_ref {
    var (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR)) = $self;
    var $fresh$ret_1 = $self'upgrade_authority;
    return (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR), $fresh$ret_1);
}

((slice, slice, int, int, cell, int, cell, cell, int, int), int) $Treasury$_fun_getAirdropPool((slice, slice, int, int, cell, int, cell, cell, int, int) $self) impure inline_ref {
    var (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR)) = $self;
    var $fresh$ret_2 = $self'airdrop_pool;
    return (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR), $fresh$ret_2);
}

((slice, slice, int, int, cell, int, cell, cell, int, int), int) $Treasury$_fun_getAirdropId((slice, slice, int, int, cell, int, cell, cell, int, int) $self) impure inline_ref {
    var (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR)) = $self;
    var $fresh$ret_3 = $self'airdrop_id;
    return (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR), $fresh$ret_3);
}

((slice, slice, int, int, cell, int, cell, cell, int, int), int) $Treasury$_fun_getCurrentRoomId((slice, slice, int, int, cell, int, cell, cell, int, int) $self) impure inline_ref {
    var (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR)) = $self;
    var $fresh$ret_4 = $self'current_room_id;
    return (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR), $fresh$ret_4);
}

((slice, slice, int, int, cell, int, cell, cell, int, int), int) $Treasury$_fun_getHouseFeeBps((slice, slice, int, int, cell, int, cell, cell, int, int) $self) impure inline_ref {
    var (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR)) = $self;
    var $fresh$ret_5 = $self'HOUSE_FEE_BPS;
    return (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR), $fresh$ret_5);
}

((slice, slice, int, int, cell, int, cell, cell, int, int), int) $Treasury$_fun_getHouseFeeDenominator((slice, slice, int, int, cell, int, cell, cell, int, int) $self) impure inline_ref {
    var (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR)) = $self;
    var $fresh$ret_6 = $self'HOUSE_FEE_DENOMINATOR;
    return (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR), $fresh$ret_6);
}

((slice, slice, int, int, cell, int, cell, cell, int, int), tuple) $Treasury$_fun_getRoomData((slice, slice, int, int, cell, int, cell, cell, int, int) $self, int $room_key) impure inline_ref {
    var (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR)) = $self;
    var $fresh$ret_7 = $RoomData$_load_opt(__tact_dict_get_int_cell($self'rooms, 257, $room_key));
    return (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR), $fresh$ret_7);
}

((slice, slice, int, int, cell, int, cell, cell, int, int), int) $Treasury$_fun_getWinnerReward((slice, slice, int, int, cell, int, cell, cell, int, int) $self, int _0, slice $addr) impure inline_ref {
    var (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR)) = $self;
    var $fresh$ret_8 = __tact_dict_get_slice_int($self'winner_rewards, 267, $addr, 257);
    return (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR), $fresh$ret_8);
}

((slice, slice, int, int, cell, int, cell, cell, int, int), int) $Treasury$_fun_getClaimedReward((slice, slice, int, int, cell, int, cell, cell, int, int) $self, int _0, slice $addr) impure inline_ref {
    var (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR)) = $self;
    var $fresh$ret_9 = __tact_dict_get_slice_int($self'claimed_rewards, 267, $addr, 257);
    return (($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR), $fresh$ret_9);
}

;;
;; Get methods of a Contract Treasury
;;

_ %getOwner() method_id(102025) {
    var self = $Treasury$_contract_load();
    var res = self~$Treasury$_fun_getOwner();
    return res;
}

_ %getUpgradeAuthority() method_id(130873) {
    var self = $Treasury$_contract_load();
    var res = self~$Treasury$_fun_getUpgradeAuthority();
    return res;
}

_ %getAirdropPool() method_id(94920) {
    var self = $Treasury$_contract_load();
    var res = self~$Treasury$_fun_getAirdropPool();
    return res;
}

_ %getAirdropId() method_id(124041) {
    var self = $Treasury$_contract_load();
    var res = self~$Treasury$_fun_getAirdropId();
    return res;
}

_ %getCurrentRoomId() method_id(80378) {
    var self = $Treasury$_contract_load();
    var res = self~$Treasury$_fun_getCurrentRoomId();
    return res;
}

_ %getHouseFeeBps() method_id(123079) {
    var self = $Treasury$_contract_load();
    var res = self~$Treasury$_fun_getHouseFeeBps();
    return res;
}

_ %getHouseFeeDenominator() method_id(71484) {
    var self = $Treasury$_contract_load();
    var res = self~$Treasury$_fun_getHouseFeeDenominator();
    return res;
}

_ %getRoomData(int $room_key) method_id(71393) {
    int $room_key = $room_key;
    var self = $Treasury$_contract_load();
    var res = self~$Treasury$_fun_getRoomData($room_key);
    return $RoomData$_to_opt_external(res);
}

_ %getWinnerReward(int $_, slice $addr) method_id(68060) {
    int $_ = $_;
    slice $addr = $addr;
    var self = $Treasury$_contract_load();
    var res = self~$Treasury$_fun_getWinnerReward($_, $addr);
    return res;
}

_ %getClaimedReward(int $_, slice $addr) method_id(125005) {
    int $_ = $_;
    slice $addr = $addr;
    var self = $Treasury$_contract_load();
    var res = self~$Treasury$_fun_getClaimedReward($_, $addr);
    return res;
}

;;
;; Routing of a Contract Treasury
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR) = $Treasury$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
        ;; Receive OpenRoom message
        if (op == 2616294104) {
            var $msg'room_key = in_msg~load_uint(32);
            var $msg'entry_fee = in_msg~load_varuint16();
            var $msg'winners_count = in_msg~load_uint(8);
            throw_unless(2493, ($msg'entry_fee > 0));
            throw_unless(39893, ($msg'winners_count > 0));
            throw_unless(14506, ($msg'winners_count <= 1000));
            throw_unless(40266, ($msg'room_key > 0));
            tuple $existing_room = $RoomData$_load_opt(__tact_dict_get_int_cell($self'rooms, 257, $msg'room_key));
            throw_unless(27407, null?($existing_room));
            var ($new_room'entry_fee, $new_room'winners_count, $new_room'status, $new_room'pool, $new_room'total_entries, $new_room'paid_hash, $new_room'created_at, $new_room'closed_at) = $RoomData$_constructor_entry_fee_winners_count_status_pool_total_entries_paid_hash_created_at_closed_at($msg'entry_fee, $msg'winners_count, 1, 0, 0, 0, $global_now(), 0);
            $self'rooms~__tact_dict_set_int_cell(257, $msg'room_key, $RoomData$_store_cell(($new_room'entry_fee, $new_room'winners_count, $new_room'status, $new_room'pool, $new_room'total_entries, $new_room'paid_hash, $new_room'created_at, $new_room'closed_at), begin_cell()));
            $self'current_room_id = $msg'room_key;
            $Treasury$_contract_store(($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR));
            return ();
        }
        
        ;; Receive EnterRoom message
        if (op == 1380690280) {
            var $msg'room_key = in_msg~load_uint(32);
            var $msg'entry_fee = in_msg~load_varuint16();
            tuple $room = $RoomData$_load_opt(__tact_dict_get_int_cell($self'rooms, 257, $msg'room_key));
            throw_unless(20618, (~ null?($room)));
            var ($room_data'entry_fee, $room_data'winners_count, $room_data'status, $room_data'pool, $room_data'total_entries, $room_data'paid_hash, $room_data'created_at, $room_data'closed_at) = $RoomData$_not_null($room);
            throw_unless(5883, ($room_data'status == 1));
            throw_unless(58501, ($room_data'entry_fee == $msg'entry_fee));
            int $actual_entry_fee = $room_data'entry_fee;
            int $received = $Context$_get_value(__tact_context_get());
            throw_unless(51351, ($received == $actual_entry_fee));
            int $house_fee = (($actual_entry_fee * $self'HOUSE_FEE_BPS) / $self'HOUSE_FEE_DENOMINATOR);
            int $pool_contribution = ($actual_entry_fee - $house_fee);
            $room_data'pool = $room_data'pool + $pool_contribution;
            $room_data'total_entries = $room_data'total_entries + 1;
            $self'rooms~__tact_dict_set_int_cell(257, $msg'room_key, $RoomData$_store_cell(($room_data'entry_fee, $room_data'winners_count, $room_data'status, $room_data'pool, $room_data'total_entries, $room_data'paid_hash, $room_data'created_at, $room_data'closed_at), begin_cell()));
            if (($house_fee > 0)) {
                $global_send($SendParameters$_constructor_to_value_body_bounce($self'owner, $house_fee, __gen_cell_cell_6d1a8dee4d2a1b026369221c05709ba15866c5c3b4bde448cc0c4a8e84202a4f(), false));
            }
            $Treasury$_contract_store(($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR));
            return ();
        }
        
        ;; Receive CloseRoom message
        if (op == 2943936156) {
            var $msg'room_key = in_msg~load_uint(32);
            tuple $room = $RoomData$_load_opt(__tact_dict_get_int_cell($self'rooms, 257, $msg'room_key));
            throw_unless(14103, (~ null?($room)));
            var ($room_data'entry_fee, $room_data'winners_count, $room_data'status, $room_data'pool, $room_data'total_entries, $room_data'paid_hash, $room_data'created_at, $room_data'closed_at) = $RoomData$_not_null($room);
            throw_unless(5883, ($room_data'status == 1));
            $room_data'status = 0;
            $room_data'closed_at = $global_now();
            $self'rooms~__tact_dict_set_int_cell(257, $msg'room_key, $RoomData$_store_cell(($room_data'entry_fee, $room_data'winners_count, $room_data'status, $room_data'pool, $room_data'total_entries, $room_data'paid_hash, $room_data'created_at, $room_data'closed_at), begin_cell()));
            $Treasury$_contract_store(($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR));
            return ();
        }
        
        ;; Receive DistributePayouts message
        if (op == 3561099507) {
            var $msg'room_key = in_msg~load_uint(32);
            var $msg'winners_count = in_msg~load_uint(8);
            var $msg'winners = in_msg~load_dict();
            tuple $room = $RoomData$_load_opt(__tact_dict_get_int_cell($self'rooms, 257, $msg'room_key));
            throw_unless(14103, (~ null?($room)));
            var ($room_data'entry_fee, $room_data'winners_count, $room_data'status, $room_data'pool, $room_data'total_entries, $room_data'paid_hash, $room_data'created_at, $room_data'closed_at) = $RoomData$_not_null($room);
            throw_unless(50845, ($room_data'status == 0));
            throw_unless(16751, ($room_data'paid_hash == 0));
            throw_unless(62631, ($msg'winners_count == $room_data'winners_count));
            int $remaining_pool = $room_data'pool;
            int $per_winner = ($remaining_pool / $msg'winners_count);
            int $i = 0;
            repeat ($msg'winners_count) {
                slice $winner_address = __tact_dict_get_int_slice($msg'winners, 257, $i);
                if ((~ null?($winner_address))) {
                    $self'winner_rewards~__tact_dict_set_slice_int(267, __tact_not_null($winner_address), $per_winner, 257);
                }
                $i = $i + 1;
            }
            $room_data'status = 2;
            $room_data'paid_hash = $global_now();
            $self'rooms~__tact_dict_set_int_cell(257, $msg'room_key, $RoomData$_store_cell(($room_data'entry_fee, $room_data'winners_count, $room_data'status, $room_data'pool, $room_data'total_entries, $room_data'paid_hash, $room_data'created_at, $room_data'closed_at), begin_cell()));
            $Treasury$_contract_store(($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR));
            return ();
        }
        
        ;; Receive ClaimReward message
        if (op == 3468397897) {
            var $msg'room_key = in_msg~load_uint(32);
            var $msg'winner_address = in_msg~load_msg_addr();
            tuple $room = $RoomData$_load_opt(__tact_dict_get_int_cell($self'rooms, 257, $msg'room_key));
            throw_unless(14103, (~ null?($room)));
            var ($room_data'entry_fee, $room_data'winners_count, $room_data'status, $room_data'pool, $room_data'total_entries, $room_data'paid_hash, $room_data'created_at, $room_data'closed_at) = $RoomData$_not_null($room);
            throw_unless(10215, ($room_data'status == 2));
            int $reward_amount = __tact_dict_get_slice_int($self'winner_rewards, 267, $msg'winner_address, 257);
            throw_unless(6225, (~ null?($reward_amount)));
            int $already_claimed = 0;
            int $claimed = __tact_dict_get_slice_int($self'claimed_rewards, 267, $msg'winner_address, 257);
            if ((~ null?($claimed))) {
                $already_claimed = __tact_not_null($claimed);
            }
            int $remaining = (__tact_not_null($reward_amount) - $already_claimed);
            throw_unless(43137, ($remaining > 0));
            $global_send($SendParameters$_constructor_to_value_body_bounce($msg'winner_address, $remaining, __gen_cell_cell_5b750024b7f8b026923d47702314a84adbeeba56e4fe4d0a81176f84cffdacbb(), false));
            $self'claimed_rewards~__tact_dict_set_slice_int(267, $msg'winner_address, ($already_claimed + $remaining), 257);
            $Treasury$_contract_store(($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR));
            return ();
        }
        
    }
    ;; Receive empty message
    if ((op == 0) & (in_msg_length <= 32)) {
        $Treasury$_contract_store(($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR));
        return ();
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "fund_airdrop" message
    if (text_op == 0xae1f55287d6c4d2042cc5941a8a23c971d49bf5e554d4fa78ae730638e083cb7) {
        $self'airdrop_pool = $self'airdrop_pool + $Context$_get_value(__tact_context_get());
        $Treasury$_contract_store(($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR));
        return ();
    }
    ;; Receive "distribute_airdrop" message
    if (text_op == 0x7e9a4e9c4db87f8cc634e496e2f129f07172c3894b3498755d7d69745e4ba895) {
        throw_unless(49080, ($self'airdrop_pool > 0));
        $self'airdrop_id = $self'airdrop_id + 1;
        int $half_pool = ($self'airdrop_pool / 2);
        int $top_scorer_count = 10;
        int $streak_winner_count = 5;
        int $top_scorer_amount = (($top_scorer_count > 0) ? ($half_pool / $top_scorer_count) : 0);
        int $streak_amount = (($streak_winner_count > 0) ? ($half_pool / $streak_winner_count) : 0);
        if (($top_scorer_amount > 0)) {
            $global_send($SendParameters$_constructor_to_value_body_bounce(__tact_context_get_sender(), $top_scorer_amount, __gen_cell_cell_05c7735d515d1aea0a143ed0596b84bd0b47fee238b45aaeebc95d1f754b9295(), false));
        }
        $self'airdrop_pool = 0;
        $Treasury$_contract_store(($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR));
        return ();
    }
    if (op == 0) {
        ;; Fallback Text Receiver
        if (in_msg_length >= 32) {
            $Treasury$_contract_store(($self'owner, $self'upgrade_authority, $self'airdrop_pool, $self'airdrop_id, $self'rooms, $self'current_room_id, $self'winner_rewards, $self'claimed_rewards, $self'HOUSE_FEE_BPS, $self'HOUSE_FEE_DENOMINATOR));
            return ();
        }
    }
    ;; Throw if not handled
    throw(130);
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.

            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack

            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                swap

                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap

                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop
                }
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond

                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll
                {
                    // If the dict is empty, throw 11
                    11 THROWARG
                }
                {
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX
                } cond
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}