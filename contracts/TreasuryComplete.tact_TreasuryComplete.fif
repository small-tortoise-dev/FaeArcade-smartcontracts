// automatically generated from `@stdlib/std/stdlib.fc` `E:/Ton/FaeArcade/FaeArcade-SmartContracts/contracts/TreasuryComplete.tact_TreasuryComplete.fc` 
PROGRAM{
  DECLPROC __tact_not_null
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC __tact_dict_get_int_int
  DECLPROC __tact_dict_set_int_int
  DECLPROC __tact_dict_get_int_cell
  DECLPROC __tact_dict_set_int_cell
  DECLPROC $DeployOk$_store
  DECLPROC $DeployOk$_store_cell
  DECLPROC $RoomData$_store
  DECLPROC $RoomData$_store_cell
  DECLPROC $RoomData$_load
  DECLPROC $RoomData$_as_optional
  DECLPROC $RoomData$_load_opt
  DECLPROC $TreasuryComplete$_store
  DECLPROC $TreasuryComplete$_load
  DECLPROC $Context$_get_value
  DECLPROC $Context$_get_raw
  DECLPROC $RoomData$_not_null
  DECLPROC $RoomData$_to_tuple
  DECLPROC $RoomData$_to_opt_tuple
  DECLPROC $RoomData$_to_opt_external
  DECLPROC $TreasuryComplete$init$_load
  DECLPROC $TreasuryComplete$_contract_init
  DECLPROC $TreasuryComplete$_contract_load
  DECLPROC $TreasuryComplete$_contract_store
  DECLPROC $TreasuryComplete$_fun_getCompositeKey
  DECLPROC $SendParameters$_constructor_to_value_body
  DECLPROC $TreasuryComplete$_fun_emitRoomEntry
  DECLPROC $TreasuryComplete$_fun_emitRoomOpened
  DECLPROC $TreasuryComplete$_fun_emitRoomClosed
  DECLPROC $TreasuryComplete$_fun_emitPayoutDistributed
  DECLPROC $TreasuryComplete$_fun_emitRewardClaimed
  DECLPROC $TreasuryComplete$_fun_emitAirdropDistributed
  DECLPROC $TreasuryComplete$_fun_getOwner
  DECLPROC $TreasuryComplete$_fun_getUpgradeAuthority
  DECLPROC $TreasuryComplete$_fun_getAirdropPool
  DECLPROC $TreasuryComplete$_fun_getAirdropId
  DECLPROC $TreasuryComplete$_fun_getCurrentRoomId
  DECLPROC $TreasuryComplete$_fun_getRoomData
  DECLPROC $TreasuryComplete$_fun_getWinnerReward
  DECLPROC $TreasuryComplete$_fun_getClaimedReward
  DECLPROC $TreasuryComplete$_fun_getHouseFeeBps
  DECLPROC $TreasuryComplete$_fun_getHouseFeeDenominator
  DECLPROC $MessageParameters$_constructor_bounce_to_value_mode_body
  DECLPROC $TreasuryComplete$_fun_notify
  DECLPROC $DeployOk$_constructor_queryId
  DECLPROC $RoomData$_constructor_entry_fee_winners_count_status_pool_total_entries_paid_hash_created_at_closed_at
  DECLPROC $SendParameters$_constructor_to_value_body_bounce
  102025 DECLMETHOD %getOwner
  130873 DECLMETHOD %getUpgradeAuthority
  94920 DECLMETHOD %getAirdropPool
  124041 DECLMETHOD %getAirdropId
  80378 DECLMETHOD %getCurrentRoomId
  71393 DECLMETHOD %getRoomData
  68060 DECLMETHOD %getWinnerReward
  125005 DECLMETHOD %getClaimedReward
  123079 DECLMETHOD %getHouseFeeBps
  71484 DECLMETHOD %getHouseFeeDenominator
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_not_null PROCINLINE:<{
    DUP
    ISNULL
    128 THROWIF
  }>
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  __tact_dict_get_int_int PROCINLINE:<{
    s1 s3 s3 XCHG3
    DICTIGET
    NULLSWAPIFNOT
    IF:<{
      SWAP
      LDIX
      DROP
    }>ELSE<{
      2DROP
      PUSHNULL
    }>
  }>
  __tact_dict_set_int_int PROCINLINE:<{
    OVER
    ISNULL
    IF:<{
      2DROP
      -ROT
      DICTIDEL
      DROP
    }>ELSE<{
      NEWC
      SWAP
      STIX
      s1 s3 s3 XCHG3
      DICTISETB
    }>
  }>
  __tact_dict_get_int_cell PROCINLINE:<{
    -ROT
    DICTIGETREF
    NULLSWAPIFNOT
    IF:<{
    }>ELSE<{
      DROP
      PUSHNULL
    }>
  }>
  __tact_dict_set_int_cell PROCINLINE:<{
    DUP
    ISNULL
    IF:<{
      DROP
      -ROT
      DICTIDEL
      DROP
    }>ELSE<{
      s1 s3 s3 XCHG3
      DICTISETREF
    }>
  }>
  $DeployOk$_store PROCINLINE:<{
    2952335191 PUSHINT
    ROT
    32 STU
    64 STU
  }>
  $DeployOk$_store_cell PROCINLINE:<{
    SWAP
    $DeployOk$_store INLINECALLDICT
    ENDC
  }>
  $RoomData$_store PROCINLINE:<{
    s7 s8 XCHG2
    257 PUSHINT
    STIX
    s1 s5 XCHG
    257 PUSHINT
    STIX
    s1 s3 XCHG
    257 PUSHINT
    STIX
    SWAP
    NEWC
    257 PUSHINT
    STIX
    s1 s2 XCHG
    257 PUSHINT
    STIX
    s1 s2 XCHG
    257 PUSHINT
    STIX
    s0 s2 XCHG
    NEWC
    257 PUSHINT
    STIX
    s1 s3 XCHG
    257 PUSHINT
    STIX
    STBREFR
    STBREFR
  }>
  $RoomData$_store_cell PROCINLINE:<{
    8 -ROLL
    $RoomData$_store INLINECALLDICT
    ENDC
  }>
  $RoomData$_load PROCINLINE:<{
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    LDREF
    SWAP
    CTOS
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    LDREF
    DROP
    CTOS
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    DROP
    s5 s8 XCHG
    s5 s7 XCHG
    s5 s6 XCHG
  }>
  $RoomData$_as_optional PROCINLINE:<{
        8 TUPLE
  }>
  $RoomData$_load_opt PROCINLINE:<{
    DUP
    ISNULL
    IF:<{
      DROP
      PUSHNULL
    }>ELSE<{
      CTOS
      $RoomData$_load INLINECALLDICT
      1 8 BLKDROP2
      $RoomData$_as_optional INLINECALLDICT
    }>
  }>
  $TreasuryComplete$_store PROCINLINE:<{
    s0 16 s() XCHG
    s1 s15 XCHG
    STSLICE
    s1 s13 XCHG
    STSLICE
    s1 s11 XCHG
    257 PUSHINT
    STIX
    s0 s9 XCHG
    NEWC
    257 PUSHINT
    STIX
    s1 s8 XCHG
    STDICT
    s1 s6 XCHG
    257 PUSHINT
    STIX
    s1 s4 XCHG
    STDICT
    s1 s2 XCHG
    STDICT
    257 PUSHINT
    STIX
    SWAP
    NEWC
    257 PUSHINT
    STIX
    s1 s2 XCHG
    257 PUSHINT
    STIX
    s1 s2 XCHG
    257 PUSHINT
    STIX
    s0 s3 XCHG
    NEWC
    257 PUSHINT
    STIX
    s1 s4 XCHG
    257 PUSHINT
    STIX
    s1 s4 XCHG
    257 PUSHINT
    STIX
    s0 s4 XCHG
    NEWC
    257 PUSHINT
    STIX
    s1 s4 XCHG
    STBREFR
    s1 s3 XCHG
    STBREFR
    s1 s2 XCHG
    STBREFR
    STBREFR
  }>
  $TreasuryComplete$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    257 PUSHINT
    LDIX
    LDREF
    SWAP
    CTOS
    257 PUSHINT
    LDIX
    LDDICT
    257 PUSHINT
    LDIX
    LDDICT
    LDDICT
    257 PUSHINT
    LDIX
    LDREF
    DROP
    CTOS
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    LDREF
    DROP
    CTOS
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    LDREF
    DROP
    CTOS
    257 PUSHINT
    LDIX
    DROP
    s13 16 s() XCHG
    s13 s15 XCHG
    s13 s14 XCHG
  }>
  $Context$_get_value PROCINLINE:<{
    s1 s3 XCHG
    3 BLKDROP
  }>
  $Context$_get_raw PROCINLINE:<{
    3 1 BLKDROP2
  }>
  $RoomData$_not_null PROCINLINE:<{
    DUP
    ISNULL
    128 THROWIF
        8 UNTUPLE
  }>
  $RoomData$_to_tuple PROCINLINE:<{
        8 TUPLE
  }>
  $RoomData$_to_opt_tuple PROCINLINE:<{
    DUP
    ISNULL
    IF:<{
      DROP
      PUSHNULL
    }>ELSE<{
      $RoomData$_not_null INLINECALLDICT
      $RoomData$_to_tuple INLINECALLDICT
    }>
  }>
  $RoomData$_to_opt_external PROCINLINE:<{
    $RoomData$_to_opt_tuple INLINECALLDICT
    DUP
    ISNULL
    IF:<{
      DROP
      PUSHNULL
    }>ELSE<{
    }>
  }>
  $TreasuryComplete$init$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    -ROT
  }>
  $TreasuryComplete$_contract_init PROCINLINE:<{
    PUSHNULL
    PUSHNULL
    PUSHNULL
    250 PUSHINT
    10000 PUSHINT
    305419896 PUSHINT
    305419897 PUSHINT
    305419898 PUSHINT
    305419899 PUSHINT
    305419900 PUSHINT
    305419901 PUSHINT
    0 PUSHINT
    s11 s11 s11 XCPU2
    s11 s12 s10 XCHG3
    s8 s9 s7 XCHG3
    s5 s6 s4 XCHG3
    s0 s3 XCHG2
  }>
  $TreasuryComplete$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $TreasuryComplete$_load INLINECALLDICT
      16 s() POP
      15 ROLL
    }>ELSE<{
      $TreasuryComplete$init$_load INLINECALLDICT
      s0 s2 XCHG
      ENDS
      SWAP
      $TreasuryComplete$_contract_init INLINECALLDICT
    }>
  }>
  $TreasuryComplete$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    s0 16 s() XCHG
    15 -ROLL
    $TreasuryComplete$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $TreasuryComplete$_fun_getCompositeKey PROCREF:<{
    DROP
    12345 PUSHINT
    SWAP
    1000000 PUSHINT
    MUL
    SWAP
    ADD
  }>
  $SendParameters$_constructor_to_value_body PROCINLINE:<{
    0 PUSHINT
    PUSHNULL
    s4 s2 XCHG2
    PUSHNULL
    s4 s2 XCHG2
    TRUE
  }>
  $TreasuryComplete$_fun_emitRoomEntry PROCREF:<{
    0 PUSHINT
        NEWC
    s7 s(-1) PUXC
    32 STU
    s1 s6 XCHG
    32 STU
    s0 s4 XCHG2
        STSLICER
    ROT
        STVARUINT16
    SWAP
        STVARUINT16
    SWAP
        STVARUINT16
        NOW
    SWAP
    32 STU
        ENDC
    17 s() PUSH
    -ROT
    $SendParameters$_constructor_to_value_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
  }>
  $TreasuryComplete$_fun_emitRoomOpened PROCREF:<{
    0 PUSHINT
        NEWC
    s10 s(-1) PUXC
    32 STU
    s1 s4 XCHG
    32 STU
    ROT
        STVARUINT16
    8 STU
        NOW
    SWAP
    32 STU
        ENDC
    17 s() PUSH
    -ROT
    $SendParameters$_constructor_to_value_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
  }>
  $TreasuryComplete$_fun_emitRoomClosed PROCREF:<{
    0 PUSHINT
        NEWC
    s9 s(-1) PUXC
    32 STU
    s1 s4 XCHG
    32 STU
    ROT
        STVARUINT16
    32 STU
        NOW
    SWAP
    32 STU
        ENDC
    17 s() PUSH
    -ROT
    $SendParameters$_constructor_to_value_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
  }>
  $TreasuryComplete$_fun_emitPayoutDistributed PROCREF:<{
    0 PUSHINT
        NEWC
    s8 s(-1) PUXC
    32 STU
    s1 s4 XCHG
    32 STU
    ROT
        STVARUINT16
    8 STU
        NOW
    SWAP
    32 STU
        ENDC
    17 s() PUSH
    -ROT
    $SendParameters$_constructor_to_value_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
  }>
  $TreasuryComplete$_fun_emitRewardClaimed PROCREF:<{
    0 PUSHINT
        NEWC
    s6 s(-1) PUXC
    32 STU
    s1 s4 XCHG
    32 STU
    ROT
        STSLICER
    SWAP
        STVARUINT16
        NOW
    SWAP
    32 STU
        ENDC
    17 s() PUSH
    -ROT
    $SendParameters$_constructor_to_value_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
  }>
  $TreasuryComplete$_fun_emitAirdropDistributed PROCREF:<{
    0 PUSHINT
        NEWC
    s7 s(-1) PUXC
    32 STU
    s1 s4 XCHG
    32 STU
    s1 s2 XCHG
    8 STU
    8 STU
        NOW
    SWAP
    32 STU
        ENDC
    17 s() PUSH
    -ROT
    $SendParameters$_constructor_to_value_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
  }>
  $TreasuryComplete$_fun_getOwner PROCREF:<{
    s15 PUSH
  }>
  $TreasuryComplete$_fun_getUpgradeAuthority PROCREF:<{
    s14 PUSH
  }>
  $TreasuryComplete$_fun_getAirdropPool PROCREF:<{
    s13 PUSH
  }>
  $TreasuryComplete$_fun_getAirdropId PROCREF:<{
    s12 PUSH
  }>
  $TreasuryComplete$_fun_getCurrentRoomId PROCREF:<{
    s10 PUSH
  }>
  $TreasuryComplete$_fun_getRoomData PROCREF:<{
    257 PUSHINT
    s13 PUSH
    s0 s2 XCHG
    __tact_dict_get_int_cell INLINECALLDICT
    $RoomData$_load_opt INLINECALLDICT
  }>
  $TreasuryComplete$_fun_getWinnerReward PROCREF:<{
    $TreasuryComplete$_fun_getCompositeKey INLINECALLDICT
    257 PUSHINT
    s0 s11 PUSH2
    s3 s3 XCHG2
    __tact_dict_get_int_int INLINECALLDICT
    DUP
    ISNULL
    IFJMP:<{
      DROP
      0 PUSHINT
    }>
    __tact_not_null INLINECALLDICT
  }>
  $TreasuryComplete$_fun_getClaimedReward PROCREF:<{
    $TreasuryComplete$_fun_getCompositeKey INLINECALLDICT
    257 PUSHINT
    s0 s10 PUSH2
    s3 s3 XCHG2
    __tact_dict_get_int_int INLINECALLDICT
    DUP
    ISNULL
    IFJMP:<{
      DROP
      0 PUSHINT
    }>
    __tact_not_null INLINECALLDICT
  }>
  $TreasuryComplete$_fun_getHouseFeeBps PROCREF:<{
    s7 PUSH
  }>
  $TreasuryComplete$_fun_getHouseFeeDenominator PROCREF:<{
    s6 PUSH
  }>
  $MessageParameters$_constructor_bounce_to_value_mode_body PROCINLINE:<{
    s3 s3 XCHG2
    s0 s4 XCHG
  }>
  $TreasuryComplete$_fun_notify PROCINLINE:<{
    __tact_context_get_sender INLINECALLDICT
    FALSE
    0 PUSHINT
    s0 s3 XCHG2
    66 PUSHINT
    SWAP
    $MessageParameters$_constructor_bounce_to_value_mode_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
        STZEROES
        // → Stack state
        // s0: Builder
        // s1: `body`
        // s2: `mode`
        STDICT
        ENDC
        SWAP
        SENDRAWMSG
  }>
  $DeployOk$_constructor_queryId PROCINLINE:<{
  }>
  $RoomData$_constructor_entry_fee_winners_count_status_pool_total_entries_paid_hash_created_at_closed_at PROCINLINE:<{
  }>
  $SendParameters$_constructor_to_value_body_bounce PROCINLINE:<{
    0 PUSHINT
    s0 s4 XCHG
    PUSHNULL
    s0 s3 XCHG
    s0 s4 XCHG
    PUSHNULL
    s2 s3 XCHG2
  }>
  %getOwner PROC:<{
    $TreasuryComplete$_contract_load INLINECALLDICT
    $TreasuryComplete$_fun_getOwner INLINECALLDICT
    16 s() POP
    15 BLKDROP
  }>
  %getUpgradeAuthority PROC:<{
    $TreasuryComplete$_contract_load INLINECALLDICT
    $TreasuryComplete$_fun_getUpgradeAuthority INLINECALLDICT
    16 s() POP
    15 BLKDROP
  }>
  %getAirdropPool PROC:<{
    $TreasuryComplete$_contract_load INLINECALLDICT
    $TreasuryComplete$_fun_getAirdropPool INLINECALLDICT
    16 s() POP
    15 BLKDROP
  }>
  %getAirdropId PROC:<{
    $TreasuryComplete$_contract_load INLINECALLDICT
    $TreasuryComplete$_fun_getAirdropId INLINECALLDICT
    16 s() POP
    15 BLKDROP
  }>
  %getCurrentRoomId PROC:<{
    $TreasuryComplete$_contract_load INLINECALLDICT
    $TreasuryComplete$_fun_getCurrentRoomId INLINECALLDICT
    16 s() POP
    15 BLKDROP
  }>
  %getRoomData PROC:<{
    $TreasuryComplete$_contract_load INLINECALLDICT
    s15 16 s() XCHG
    15 ROLL
    $TreasuryComplete$_fun_getRoomData INLINECALLDICT
    16 s() POP
    15 BLKDROP
    $RoomData$_to_opt_external INLINECALLDICT
  }>
  %getWinnerReward PROC:<{
    $TreasuryComplete$_contract_load INLINECALLDICT
    s15 17 s() XCHG
    s14 16 s() XCHG
    2 14 BLKSWAP
    $TreasuryComplete$_fun_getWinnerReward INLINECALLDICT
    16 s() POP
    15 BLKDROP
  }>
  %getClaimedReward PROC:<{
    $TreasuryComplete$_contract_load INLINECALLDICT
    s15 17 s() XCHG
    s14 16 s() XCHG
    2 14 BLKSWAP
    $TreasuryComplete$_fun_getClaimedReward INLINECALLDICT
    16 s() POP
    15 BLKDROP
  }>
  %getHouseFeeBps PROC:<{
    $TreasuryComplete$_contract_load INLINECALLDICT
    $TreasuryComplete$_fun_getHouseFeeBps INLINECALLDICT
    16 s() POP
    15 BLKDROP
  }>
  %getHouseFeeDenominator PROC:<{
    $TreasuryComplete$_contract_load INLINECALLDICT
    $TreasuryComplete$_fun_getHouseFeeDenominator INLINECALLDICT
    16 s() POP
    15 BLKDROP
  }>
  recv_internal PROC:<{
    c2 SAVE
    SAMEALTSAVE
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $TreasuryComplete$_contract_load INLINECALLDICT
    s0 17 s() XCHG
    IFJMP:<{
      15 BLKDROP
      2DROP
    }>
    s15 PUSH
    SBITS
    31 GTINT
    IF:<{
      s0 s15 XCHG
      32 LDU
      SWAP
      2490013878 PUSHINT
      EQUAL
      IFJMP:<{
        64 LDU
        DROP
        $DeployOk$_constructor_queryId INLINECALLDICT
        NEWC
        $DeployOk$_store_cell INLINECALLDICT
        s14 16 s() XCHG
        s13 s15 XCHG
        s12 s14 XCHG
        s11 s13 XCHG
        s10 s12 XCHG
        s9 s11 XCHG
        s8 s10 XCHG
        s7 s9 XCHG
        s6 s8 XCHG
        s5 s7 XCHG
        s4 s6 XCHG
        s3 s5 XCHG
        s4 s3 s0 XCHG3
        s1 s2 XCHG
        $TreasuryComplete$_fun_notify INLINECALLDICT
        $TreasuryComplete$_contract_store INLINECALLDICT
        RETALT
      }>
      s0 s15 XCHG
    }>
    s0 s15 XCHG
    HASHSU
    DUP
    65339108170947719366692940865188853848563609028251501148827695358024788922791 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      s8 POP
      12345 PUSHINT
      1500000000 PUSHINT
      100 PUSHINT
      s11 PUSH
      257 PUSHINT
      s4 PUSH
      __tact_dict_get_int_cell INLINECALLDICT
      $RoomData$_load_opt INLINECALLDICT
      27407 PUSHINT
      SWAP
      ISNULL
      THROWANYIFNOT
      1 PUSHINT
      0 PUSHINT
      s0 s0 PUSH2
          NOW
      s1 s6 PUSH2
      s6 s7 XCPU
      s0 s6 XCHG
      4 2 BLKSWAP
      $RoomData$_constructor_entry_fee_winners_count_status_pool_total_entries_paid_hash_created_at_closed_at INLINECALLDICT
      s0 s7 XCHG
      s0 s6 XCHG
      s0 s5 XCHG
      s0 s4 XCHG
      s3 s1 s3 XCHG3
      257 PUSHINT
      s2 s8 XCHG2
      NEWC
      $RoomData$_store_cell INLINECALLDICT
      s4 PUSH
      s3 s14 XCHG
      SWAP
      __tact_dict_set_int_cell INLINECALLDICT
      s2 PUSH
      16 s() 18 s() XCHG
      s15 17 s() XCHG
      s14 16 s() XCHG
      s0 s13 XCHG
      s14 s15 XCHG2
      s10 s12 XCHG
      s9 s11 XCHG
      s8 s10 XCHG
      s7 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s0 s4 XCHG
      s3 s3 s6 XCHG3
      $TreasuryComplete$_fun_emitRoomOpened INLINECALLDICT
      $TreasuryComplete$_contract_store INLINECALLDICT
    }>
    DUP
    11486432764598937623712776083356782539686719346690947096398028292056259328638 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      12345 PUSHINT
      s10 PUSH
      257 PUSHINT
      s2 PUSH
      __tact_dict_get_int_cell INLINECALLDICT
      $RoomData$_load_opt INLINECALLDICT
      14103 PUSHINT
      OVER
      ISNULL
      NOT
      THROWANYIFNOT
      $RoomData$_not_null INLINECALLDICT
      5883 PUSHINT
      s6 PUSH
      1 EQINT
      THROWANYIFNOT
      60262 PUSHINT
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      s9 PUSH
      EQUAL
      THROWANYIFNOT
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      s15 PUSH
      MUL
      s14 PUSH
      DIV
      DUP
      0 GTINT
      IF:<{
            B{b5ee9c7241010101000f00001a00000000486f7573652046656509a96100} B>boc PUSHREF
        FALSE
        25 s() PUSH
        s3 s2 s(-1) PUXC2
        $SendParameters$_constructor_to_value_body_bounce INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            AND
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      }>
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      OVER
      SUB
      s6 s6 XCPU
      ADD
      s0 s5 XCHG
      INC
      s6 s9 XCHG
      s5 s8 XCHG
      s4 s7 XCHG
      s3 s8 XCHG
      s7 s2 XCHG2
      257 PUSHINT
      s9 s9 XCHG2
      NEWC
      $RoomData$_store_cell INLINECALLDICT
      s14 s14 s0 XCHG3
      s4 s(-1) PUXC
      __tact_dict_set_int_cell INLINECALLDICT
      __tact_context_get_sender INLINECALLDICT
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      18 s() 20 s() XCHG
      17 s() 19 s() XCHG
      16 s() 18 s() XCHG
      s15 17 s() XCHG
      s2 16 s() XCHG
      s13 s15 XCHG
      s12 s14 XCHG
      s11 s13 XCHG
      s10 s12 XCHG
      s9 s11 XCHG
      s8 s10 XCHG
      s7 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s5 s6 XCHG
      s0 s3 s5 XCHG3
      $TreasuryComplete$_fun_emitRoomEntry INLINECALLDICT
      $TreasuryComplete$_contract_store INLINECALLDICT
    }>
    DUP
    54709548354444288198623477096176682854704660567423002246104655167742043597676 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      __tact_context_get INLINECALLDICT
      $Context$_get_raw INLINECALLDICT
      32 LDU
      DROP
      s10 PUSH
      257 PUSHINT
      s2 PUSH
      __tact_dict_get_int_cell INLINECALLDICT
      $RoomData$_load_opt INLINECALLDICT
      14103 PUSHINT
      OVER
      ISNULL
      NOT
      THROWANYIFNOT
      $RoomData$_not_null INLINECALLDICT
      DROP
      5883 PUSHINT
      s0 s5 XCHG
      1 EQINT
      s1 s5 XCHG
      THROWANYIFNOT
      0 PUSHINT
          NOW
      s4 s7 XCHG
      s3 s6 XCHG
      s1 s2 XCHG
      257 PUSHINT
      NEWC
      s9 PUSH
      s4 s9 XCPU
      s9 s3 s4 XCHG3
      s0 s9 XCHG2
      $RoomData$_store_cell INLINECALLDICT
      s4 PUSH
      s3 s15 XCHG
      SWAP
      __tact_dict_set_int_cell INLINECALLDICT
      16 s() 18 s() XCHG
      s15 17 s() XCHG
      s14 16 s() XCHG
      s13 s15 XCHG
      s0 s14 XCHG
      s11 s13 XCHG
      s10 s12 XCHG
      s9 s11 XCHG
      s8 s10 XCHG
      s7 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s0 s3 XCHG
      s0 s5 XCHG
      s0 s4 XCHG
      $TreasuryComplete$_fun_emitRoomClosed INLINECALLDICT
      $TreasuryComplete$_contract_store INLINECALLDICT
    }>
    DUP
    28466891789605301170832847753817431063830196472348801829970884850397944370661 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      __tact_context_get INLINECALLDICT
      $Context$_get_raw INLINECALLDICT
      32 LDU
      8 LDU
      s12 PUSH
      257 PUSHINT
      s4 PUSH
      __tact_dict_get_int_cell INLINECALLDICT
      $RoomData$_load_opt INLINECALLDICT
      14103 PUSHINT
      OVER
      ISNULL
      NOT
      THROWANYIFNOT
      $RoomData$_not_null INLINECALLDICT
      50845 PUSHINT
      s0 s6 XCHG
      0 EQINT
      s1 s6 XCHG
      THROWANYIFNOT
      16751 PUSHINT
      s0 s2 XCHG
      0 EQINT
      s1 s2 XCHG
      THROWANYIFNOT
      62631 PUSHINT
      s8 s5 PUSH2
      EQUAL
      THROWANYIFNOT
      s7 PUSH
      INC
      s8 s(-1) PUXC
      MUL
      1 RSHIFT#
      s3 PUSH
      0 PUSHINT
      WHILE:<{
        s0 s10 PUSH2
        LESS
      }>DO<{
        s0 s9 XCHG
            LDMSGADDR
        s11 s10 PUSH2
        SUB
        s3 s(-1) PUXC
        MUL
        s4 PUSH
        DIV
        16 s() 27 s() XCHG
        s15 26 s() XCHG
        s14 25 s() XCHG
        s13 24 s() XCHG
        s12 23 s() XCHG
        s11 22 s() XCHG
        s10 21 s() XCHG
        s9 20 s() XCHG
        s8 19 s() XCHG
        s7 18 s() XCHG
        s6 17 s() XCHG
        s5 27 s() XCHG
        s4 26 s() XCHG
        s3 25 s() XCHG
        s2 28 s() XCHG
        s1 29 s() XCHG
        24 s() PUSH
        SWAP
        s0 29 s() XCHG
        $TreasuryComplete$_fun_getCompositeKey INLINECALLDICT
        257 PUSHINT
        DUP
        s4 s12 XCHG
        s1 s3 XCHG
        s1 30 s() XCHG
        __tact_dict_set_int_int INLINECALLDICT
        s0 20 s() XCHG
        INC
        26 s() 27 s() XCHG
        s8 26 s() XCHG
        s14 25 s() XCHG
        s13 24 s() XCHG
        s12 23 s() XCHG
        s11 22 s() XCHG
        s10 21 s() XCHG
        s9 20 s() XCHG
        s9 19 s() XCHG
        s7 18 s() XCHG
        s6 17 s() XCHG
        s5 16 s() XCHG
        s4 s15 XCHG
        s3 s14 XCHG
        s13 s12 s0 XCHG3
        s8 s9 XCHG
      }>
      3 BLKDROP
      s6 POP
      2 PUSHINT
          NOW
      s5 s6 XCHG
      s4 s6 XCHG
      s1 s3 XCHG
      257 PUSHINT
      s2 PUSH
      s3 s4 XCHG
      s9 s8 XCHG2
      NEWC
      $RoomData$_store_cell INLINECALLDICT
      s14 s14 s0 XCHG3
      s4 s(-1) PUXC
      __tact_dict_set_int_cell INLINECALLDICT
      16 s() 18 s() XCHG
      s15 17 s() XCHG
      s14 16 s() XCHG
      s13 s15 XCHG
      s0 s14 XCHG
      s11 s13 XCHG
      s10 s12 XCHG
      s9 s11 XCHG
      s8 s10 XCHG
      s7 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s0 s3 XCHG
      s0 s5 XCHG
      s4 s4 XCHG2
      $TreasuryComplete$_fun_emitPayoutDistributed INLINECALLDICT
      $TreasuryComplete$_contract_store INLINECALLDICT
    }>
    DUP
    69163352605080884435779831472281579226127863706528502086372950657579703068540 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      __tact_context_get INLINECALLDICT
      $Context$_get_raw INLINECALLDICT
      32 LDU
          LDMSGADDR
      DROP
      s1 16 s() XCHG
      s0 17 s() XCHG
      16 s() PUSH
      18 s() PUSH
      $TreasuryComplete$_fun_getCompositeKey INLINECALLDICT
      257 PUSHINT
      s11 s(-1) s(-1) PUXCPU
      s3 s(-1) PUXC
      __tact_dict_get_int_int INLINECALLDICT
      63475 PUSHINT
      OVER
      ISNULL
      NOT
      THROWANYIFNOT
      __tact_not_null INLINECALLDICT
      63475 PUSHINT
      OVER
      0 GTINT
      THROWANYIFNOT
      257 PUSHINT
      s11 s(-1) s(-1) PUXCPU
      s4 s(-1) PUXC
      __tact_dict_get_int_int INLINECALLDICT
      0 PUSHINT
      OVER
      ISNULL
      NOT
      IF:<{
        DROP
        __tact_not_null INLINECALLDICT
      }>ELSE<{
        NIP
      }>
      3335 PUSHINT
      SWAP
      0 EQINT
      THROWANYIFNOT
          B{b5ee9c724101010100120000200000000052657761726420436c61696d46f5a0f8} B>boc PUSHREF
      20 s() PUSH
      s2 s1 PUXC
      $SendParameters$_constructor_to_value_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      257 PUSHINT
      DUP
      s3 s12 XCHG
      s1 s12 s0 XCHG3
      s12 s(-1) PUXC
      __tact_dict_set_int_int INLINECALLDICT
      16 s() 18 s() XCHG
      s15 17 s() XCHG
      s14 16 s() XCHG
      s13 s15 XCHG
      s12 s14 XCHG
      s11 s13 XCHG
      s10 s12 XCHG
      s0 s11 XCHG
      2 9 BLKSWAP
      $TreasuryComplete$_fun_emitRewardClaimed INLINECALLDICT
      $TreasuryComplete$_contract_store INLINECALLDICT
    }>
    DUP
    78757795652542414393474882215661487212723556572562023039495818662823781219511 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      s1 s12 XCHG
      ADD
      s13 s15 XCHG
      s12 s14 XCHG
      s0 s13 XCHG
      s10 s12 XCHG
      s9 s11 XCHG
      s8 s10 XCHG
      s7 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      s1 s2 XCHG
      $TreasuryComplete$_contract_store INLINECALLDICT
    }>
    DUP
    57264055919619110494171454587088091180320136340382694066611435050529519806613 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      1 PUSHINT
      10 PUSHINT
      5 PUSHINT
      49080 PUSHINT
      s15 PUSH
      0 GTINT
      THROWANYIFNOT
      s0 s13 XCHG
      INC
      s0 s14 XCHG
      1 RSHIFT#
      s0 s1 PUSH2
      DIV
      NIP
      DUP
      0 GTINT
      IF:<{
        __tact_context_get_sender INLINECALLDICT
            B{b5ee9c7241010101001800002c00000000546f702053636f7265722041697264726f706da78ddf} B>boc PUSHREF
        s1 s2 XCHG
        $SendParameters$_constructor_to_value_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            AND
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      }>ELSE<{
        DROP
      }>
      s15 17 s() XCHG
      s14 16 s() XCHG
      0 PUSHINT
      s0 16 s() XCHG
      s14 s15 XCHG
      s12 s14 XCHG
      s11 s13 XCHG
      s10 s12 XCHG
      s9 s11 XCHG
      s8 s10 XCHG
      s7 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s0 s3 XCHG
      s0 s5 XCHG
      $TreasuryComplete$_fun_emitAirdropDistributed INLINECALLDICT
      $TreasuryComplete$_contract_store INLINECALLDICT
    }>
    89995767705625181278073524248112866241346435207594766842139556122302068663934 PUSHINT
    EQUAL
    IFJMP:<{
      49729 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s14 PUSH
      SDEQ
      THROWANYIFNOT
      s13 s15 XCHG
      2 13 BLKSWAP
      $TreasuryComplete$_contract_store INLINECALLDICT
    }>
    15 BLKDROP
    DROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                    swap
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop
                    }
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll
                    {
                        // If the dict is empty, throw 11
                        11 THROWARG
                    }
                    {
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX
                    } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
